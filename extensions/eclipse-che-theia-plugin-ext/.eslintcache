[{"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-api-provider.ts":"1","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-devfile-main.ts":"2","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-factory-main.ts":"3","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-frontend-module.ts":"4","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-github-main.ts":"5","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-mini-browser-open-handler.ts":"6","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-oauth-main.ts":"7","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-openshift-main.ts":"8","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-product-main.ts":"9","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-sidecar-content-reader-main.ts":"10","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-sidecar-resource.ts":"11","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-ssh-main.ts":"12","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-client.ts":"13","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-main.ts":"14","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-resolver.ts":"15","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-terminal-widget-manager.ts":"16","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-telemetry-main.ts":"17","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-user-main.ts":"18","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-variables-main.ts":"19","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-webview-environment.ts":"20","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-workspace-main.ts":"21","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/container-picker.ts":"22","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/oauth-utils.ts":"23","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-command-contribution.ts":"24","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-frontend-service.ts":"25","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-manager.ts":"26","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-menu.ts":"27","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-preferences.ts":"28","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-service-client.ts":"29","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view-contribution.ts":"30","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view-list.tsx":"31","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view-toolbar.tsx":"32","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view.tsx":"33","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/task-config-service.ts":"34","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/task-status-handler.ts":"35","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/che-plugin-protocol.ts":"36","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/che-protocol.ts":"37","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/che-server-common.ts":"38","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/plugin/plugin-filter.ts":"39","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-api-service.ts":"40","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-backend-module.ts":"41","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-client-ip-service.ts":"42","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-https.ts":"43","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-plugin-api-provider.ts":"44","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-plugin-script-service.ts":"45","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-plugin-service.ts":"46","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-product-service.ts":"47","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-task-service.ts":"48","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/plugin-service.ts":"49","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-api.ts":"50","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-devfile.ts":"51","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-factory.ts":"52","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-github.ts":"53","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-oauth.ts":"54","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-openshift.ts":"55","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-product.ts":"56","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-sidecar-content-reader.ts":"57","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-ssh.ts":"58","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-task-impl.ts":"59","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-telemetry.ts":"60","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-user.ts":"61","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-variables.ts":"62","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-workspace.ts":"63","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/node/che-api-node-provider.ts":"64","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/webworker/che-api-worker-provider.ts":"65"},{"size":2812,"mtime":1591263742314,"results":"66","hashOfConfig":"67"},{"size":3525,"mtime":1591263742314,"results":"68","hashOfConfig":"67"},{"size":1162,"mtime":1591263742314,"results":"69","hashOfConfig":"67"},{"size":6044,"mtime":1591263742314,"results":"70","hashOfConfig":"67"},{"size":2241,"mtime":1591263742314,"results":"71","hashOfConfig":"67"},{"size":860,"mtime":1591263742314,"results":"72","hashOfConfig":"67"},{"size":1096,"mtime":1591263742314,"results":"73","hashOfConfig":"67"},{"size":2440,"mtime":1591263742314,"results":"74","hashOfConfig":"67"},{"size":980,"mtime":1591263742314,"results":"75","hashOfConfig":"67"},{"size":1312,"mtime":1591263742314,"results":"76","hashOfConfig":"67"},{"size":2322,"mtime":1591263742314,"results":"77","hashOfConfig":"67"},{"size":1492,"mtime":1591263742314,"results":"78","hashOfConfig":"67"},{"size":1712,"mtime":1591263742314,"results":"79","hashOfConfig":"67"},{"size":2896,"mtime":1591263742314,"results":"80","hashOfConfig":"67"},{"size":5462,"mtime":1591263742314,"results":"81","hashOfConfig":"67"},{"size":2998,"mtime":1591263742314,"results":"82","hashOfConfig":"67"},{"size":2737,"mtime":1591263742314,"results":"83","hashOfConfig":"67"},{"size":1367,"mtime":1591263742314,"results":"84","hashOfConfig":"67"},{"size":2257,"mtime":1591263742314,"results":"85","hashOfConfig":"67"},{"size":2002,"mtime":1591263742314,"results":"86","hashOfConfig":"67"},{"size":1518,"mtime":1591263742314,"results":"87","hashOfConfig":"67"},{"size":6598,"mtime":1591263742314,"results":"88","hashOfConfig":"67"},{"size":4503,"mtime":1591263742314,"results":"89","hashOfConfig":"67"},{"size":3379,"mtime":1591263742314,"results":"90","hashOfConfig":"67"},{"size":3726,"mtime":1591263742314,"results":"91","hashOfConfig":"67"},{"size":19049,"mtime":1591263742318,"results":"92","hashOfConfig":"67"},{"size":5064,"mtime":1591263742318,"results":"93","hashOfConfig":"67"},{"size":2153,"mtime":1591263742318,"results":"94","hashOfConfig":"67"},{"size":3393,"mtime":1591263742318,"results":"95","hashOfConfig":"67"},{"size":1542,"mtime":1591263742318,"results":"96","hashOfConfig":"67"},{"size":10717,"mtime":1591263742318,"results":"97","hashOfConfig":"67"},{"size":3802,"mtime":1591263742318,"results":"98","hashOfConfig":"67"},{"size":12833,"mtime":1591263742318,"results":"99","hashOfConfig":"67"},{"size":5360,"mtime":1591263742318,"results":"100","hashOfConfig":"67"},{"size":4257,"mtime":1591263742318,"results":"101","hashOfConfig":"67"},{"size":4175,"mtime":1591263742318,"results":"102","hashOfConfig":"67"},{"size":16908,"mtime":1591263742318,"results":"103","hashOfConfig":"67"},{"size":908,"mtime":1591263742318,"results":"104","hashOfConfig":"67"},{"size":2377,"mtime":1591263742318,"results":"105","hashOfConfig":"67"},{"size":12834,"mtime":1591263742318,"results":"106","hashOfConfig":"67"},{"size":3784,"mtime":1591263742318,"results":"107","hashOfConfig":"67"},{"size":1079,"mtime":1591263742318,"results":"108","hashOfConfig":"67"},{"size":459,"mtime":1591263742318,"results":"109","hashOfConfig":"67"},{"size":1060,"mtime":1591263742318,"results":"110","hashOfConfig":"67"},{"size":1007,"mtime":1591263742318,"results":"111","hashOfConfig":"67"},{"size":20388,"mtime":1591263742318,"results":"112","hashOfConfig":"67"},{"size":3558,"mtime":1591263742318,"results":"113","hashOfConfig":"67"},{"size":4789,"mtime":1591263742318,"results":"114","hashOfConfig":"67"},{"size":3487,"mtime":1591263742318,"results":"115","hashOfConfig":"67"},{"size":10887,"mtime":1591263742318,"results":"116","hashOfConfig":"67"},{"size":1024,"mtime":1591263742318,"results":"117","hashOfConfig":"67"},{"size":1086,"mtime":1591263742318,"results":"118","hashOfConfig":"67"},{"size":1001,"mtime":1591263742318,"results":"119","hashOfConfig":"67"},{"size":1113,"mtime":1591263742318,"results":"120","hashOfConfig":"67"},{"size":887,"mtime":1591263742318,"results":"121","hashOfConfig":"67"},{"size":1407,"mtime":1591263742318,"results":"122","hashOfConfig":"67"},{"size":1280,"mtime":1591263742322,"results":"123","hashOfConfig":"67"},{"size":2042,"mtime":1591263742322,"results":"124","hashOfConfig":"67"},{"size":3149,"mtime":1591263742322,"results":"125","hashOfConfig":"67"},{"size":1746,"mtime":1591263742322,"results":"126","hashOfConfig":"67"},{"size":1381,"mtime":1591263742322,"results":"127","hashOfConfig":"67"},{"size":2093,"mtime":1591263742322,"results":"128","hashOfConfig":"67"},{"size":2729,"mtime":1591263742322,"results":"129","hashOfConfig":"67"},{"size":2494,"mtime":1591263742322,"results":"130","hashOfConfig":"67"},{"size":1863,"mtime":1591263742322,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iq52wc",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-api-provider.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-devfile-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-factory-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-frontend-module.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-github-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-mini-browser-open-handler.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-oauth-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-openshift-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-product-main.ts",["270"],"/*********************************************************************\n * Copyright (c) 2019 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\n\nimport { interfaces } from 'inversify';\nimport { CheProductMain, CheProductService, Product } from '../common/che-protocol';\nimport { RPCProtocol } from '@theia/plugin-ext/lib/common/rpc-protocol';\n\nexport class CheProductMainImpl implements CheProductMain {\n\n    private readonly cheProductService: CheProductService;\n\n    constructor(container: interfaces.Container, rpc: RPCProtocol) {\n        this.cheProductService = container.get(CheProductService);\n    }\n\n    async $getProduct(): Promise<Product> {\n        return await this.cheProductService.getProduct();\n    }\n\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-sidecar-content-reader-main.ts",["271"],"/*********************************************************************\n * Copyright (c) 2019 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\n\nimport { RPCProtocol } from '@theia/plugin-ext/lib/common/rpc-protocol';\nimport { interfaces } from 'inversify';\nimport { CheSideCarContentReader, CheSideCarContentReaderMain, CheSideCarContentReaderRegistry, PLUGIN_RPC_CONTEXT } from '../common/che-protocol';\n\nexport class CheSideCarContentReaderMainImpl implements CheSideCarContentReaderMain {\n    private readonly delegate: CheSideCarContentReader;\n    private readonly registry: CheSideCarContentReaderRegistry;\n\n    constructor(container: interfaces.Container, rpc: RPCProtocol) {\n        this.delegate = rpc.getProxy(PLUGIN_RPC_CONTEXT.CHE_SIDERCAR_CONTENT_READER);\n        this.registry = container.get(CheSideCarContentReaderRegistry);\n    }\n\n    async $registerContentReader(scheme: string): Promise<void> {\n        this.registry.register(scheme, async (uri, options?: { encoding?: string }) => await this.delegate.$read(uri, options));\n    }\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-sidecar-resource.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-ssh-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-client.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-resolver.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-task-terminal-widget-manager.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-telemetry-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-user-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-variables-main.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-webview-environment.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/che-workspace-main.ts",["272"],"/*********************************************************************\n * Copyright (c) 2018 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\n\nimport { interfaces } from 'inversify';\nimport { CheWorkspaceMain, CheApiService } from '../common/che-protocol';\nimport { che as cheApi } from '@eclipse-che/api';\n\nexport class CheWorkspaceMainImpl implements CheWorkspaceMain {\n\n    private readonly cheApiService: CheApiService;\n\n    constructor(container: interfaces.Container) {\n        this.cheApiService = container.get(CheApiService);\n    }\n\n    $getCurrentWorkspace(): Promise<cheApi.workspace.Workspace> {\n        return this.cheApiService.currentWorkspace().then(workspace => workspace, error => {\n            console.log(error);\n            return undefined!;\n        });\n    }\n\n    async $getById(workspaceId: string): Promise<cheApi.workspace.Workspace> {\n        return this.cheApiService.getWorkspaceById(workspaceId).then(workspace => workspace, error => {\n            console.log(error);\n            return undefined!;\n        });\n    }\n\n    async $update(workspaceId: string, workspace: cheApi.workspace.Workspace): Promise<cheApi.workspace.Workspace> {\n        return await this.cheApiService.updateWorkspace(workspaceId, workspace);\n    }\n\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/container-picker.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/oauth-utils.ts",["273","274"],"/*********************************************************************\n * Copyright (c) 2020 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\nimport { inject, injectable } from 'inversify';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { CheApiService } from '../common/che-protocol';\nimport { Emitter, Event } from '@theia/core/lib/common';\n\n@injectable()\nexport class OauthUtils {\n\n    private apiUrl: string;\n    private machineToken: string | undefined;\n    private oAuthPopup: Window | undefined;\n    private userToken: string | undefined;\n    private readonly onDidReceiveToken: Event<void>;\n    constructor(@inject(EnvVariablesServer) private readonly envVariableServer: EnvVariablesServer,\n        @inject(CheApiService) private readonly cheApiService: CheApiService) {\n        const onDidReceiveTokenEmitter = new Emitter<void>();\n        this.onDidReceiveToken = onDidReceiveTokenEmitter.event;\n        this.envVariableServer.getValue('CHE_API').then(variable => {\n            if (variable && variable.value) {\n                this.apiUrl = variable.value;\n            }\n        });\n        this.envVariableServer.getValue('CHE_MACHINE_TOKEN').then(variable => {\n            if (variable && variable.value) {\n                this.machineToken = variable.value;\n            }\n        });\n        window.addEventListener('message', data => {\n            const message = data.data;\n            if (!this.oAuthPopup || typeof message !== 'string') {\n                return;\n            }\n            if (message.startsWith('token:')) {\n                this.oAuthPopup.close();\n                this.userToken = data.data.substring(6, data.data.length);\n                onDidReceiveTokenEmitter.fire(undefined);\n            } else if (message.startsWith('status:') && this.oAuthPopup) {\n                this.oAuthPopup.postMessage('token:' + (this.machineToken ? this.machineToken : ''), '*');\n            }\n        });\n    }\n\n    private async getUserToken(): Promise<string | undefined> {\n        if (this.userToken) {\n            return this.userToken;\n        } else if (this.machineToken && this.machineToken.length > 0) {\n            const popup = window.open(`${this.apiUrl.substring(0, this.apiUrl.indexOf('/api'))}/_app/oauth.html`,\n                'popup', 'toolbar=no, status=no, menubar=no, scrollbars=no, width=10, height=10, visible=none');\n            if (popup) {\n                this.oAuthPopup = popup;\n            }\n            return new Promise(async resolve => {\n                this.onDidReceiveToken(() => resolve(this.userToken));\n            });\n        }\n    }\n\n    async getToken(oAuthProvider: string): Promise<string | undefined> {\n        return await this.cheApiService.getOAuthToken(oAuthProvider, await this.getUserToken());\n    }\n\n    async getProviders(): Promise<string[]> {\n        return await this.cheApiService.getOAuthProviders(await this.getUserToken());\n    }\n\n    async isAuthenticated(provider: string): Promise<boolean> {\n        try {\n            await this.cheApiService.getOAuthToken(provider, await this.getUserToken());\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    async isRegistered(provider: string): Promise<boolean> {\n        try {\n            await this.cheApiService.getOAuthToken(provider, await this.getUserToken());\n            return true;\n        } catch (e) {\n            return e.message.indexOf('Request failed with status code 401') > 0;\n        }\n    }\n\n    authenticate(oauthProvider: string, scope?: string[]): Promise<void> {\n        return new Promise(async (resolve, reject) => {\n            const redirectUrl = window.location.href;\n            let url = `${this.apiUrl.substring(0, this.apiUrl.indexOf('/api'))}/_app/oauth.html?oauth_provider=${oauthProvider}`;\n            if (scope) {\n                for (const s of scope) {\n                    url += `&scope=${s}`;\n                }\n            }\n            url += `&redirect_after_login=${redirectUrl}`;\n            const popup = window.open(url, 'popup');\n            if (popup) {\n                this.oAuthPopup = popup;\n            }\n            this.onDidReceiveToken(() => resolve(undefined));\n        });\n    }\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-command-contribution.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-frontend-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-manager.ts",["275","276"],"/********************************************************************************\n * Copyright (C) 2019 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { CheApiService } from '../../common/che-protocol';\nimport {\n    ChePluginService,\n    ChePluginRegistry,\n    ChePluginRegistries,\n    ChePlugin,\n    ChePluginMetadata\n} from '../../common/che-plugin-protocol';\nimport { PluginServer } from '@theia/plugin-ext/lib/common/plugin-protocol';\nimport { MessageService, Emitter, Event } from '@theia/core/lib/common';\nimport { ConfirmDialog } from '@theia/core/lib/browser';\nimport { ChePluginPreferences } from './che-plugin-preferences';\nimport { ChePluginFrontentService } from './che-plugin-frontend-service';\nimport { PreferenceService, PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { PluginFilter } from '../../common/plugin/plugin-filter';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\n\n@injectable()\nexport class ChePluginManager {\n\n    /**\n     * Default plugin registry\n     */\n    private defaultRegistry: ChePluginRegistry;\n\n    /**\n     * Registry list\n     */\n    private registryList: ChePluginRegistry[];\n\n    /**\n     * List of installed plugins.\n     * Initialized by plugins received from workspace config.\n     */\n    private installedPlugins: string[];\n\n    @inject(ChePluginService)\n    protected readonly chePluginService: ChePluginService;\n\n    @inject(PluginServer)\n    protected readonly pluginServer: PluginServer;\n\n    @inject(CheApiService)\n    protected readonly cheApiService: CheApiService;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(EnvVariablesServer)\n    protected readonly envVariablesServer: EnvVariablesServer;\n\n    @inject(ChePluginPreferences)\n    protected readonly chePluginPreferences: ChePluginPreferences;\n\n    @inject(PreferenceService)\n    protected readonly preferenceService: PreferenceService;\n\n    @inject(ChePluginFrontentService)\n    protected readonly pluginFrontentService: ChePluginFrontentService;\n\n    /********************************************************************************\n     * Changing the Workspace Configuration\n     ********************************************************************************/\n\n    protected readonly workspaceConfigurationChangedEvent = new Emitter<void>();\n\n    get onWorkspaceConfigurationChanged(): Event<void> {\n        return this.workspaceConfigurationChangedEvent.event;\n    }\n\n    /********************************************************************************\n     * Changing the list of Plugin Registries\n     ********************************************************************************/\n\n    protected readonly pluginRegistryListChangedEvent = new Emitter<void>();\n\n    get onPluginRegistryListChanged(): Event<void> {\n        return this.pluginRegistryListChangedEvent.event;\n    }\n\n    /**\n     * Restores list of custom registries\n     */\n    private async restoreRegistryList(): Promise<void> {\n        // wait for preference service\n        await this.preferenceService.ready;\n\n        const prefs = this.chePluginPreferences['chePlugins.repositories'];\n        if (prefs) {\n            Object.keys(prefs).forEach(repoName => {\n                const uri = prefs[repoName];\n\n                const registry = this.registryList.find(r => r.uri === uri);\n                if (registry === undefined) {\n                    this.registryList.push({\n                        name: repoName,\n                        uri: uri\n                    });\n                }\n            });\n        }\n    }\n\n    private async initDefaults(): Promise<void> {\n        if (!this.defaultRegistry) {\n            this.defaultRegistry = await this.chePluginService.getDefaultRegistry();\n        }\n\n        if (!this.registryList) {\n            this.registryList = [this.defaultRegistry];\n            await this.restoreRegistryList();\n        }\n\n        if (!this.installedPlugins) {\n            // Get list of plugins from workspace config\n            this.installedPlugins = await this.chePluginService.getWorkspacePlugins();\n        }\n    }\n\n    addRegistry(registry: ChePluginRegistry): void {\n        this.registryList.push(registry);\n\n        // Save list of custom repositories to preferences\n        const prefs: { [index: string]: string } = {};\n        this.registryList.forEach(r => {\n            if (r.name !== 'Default') {\n                prefs[r.name] = r.uri;\n            }\n        });\n\n        this.preferenceService.set('chePlugins.repositories', prefs, PreferenceScope.User);\n\n        // notify that plugin registry list has been changed\n        this.pluginRegistryListChangedEvent.fire();\n    }\n\n    removeRegistry(registry: ChePluginRegistry): void {\n        this.registryList = this.registryList.filter(r => r.uri !== registry.uri);\n    }\n\n    getRegistryList(): ChePluginRegistry[] {\n        return this.registryList;\n    }\n\n    /**\n     * Udates the Plugin cache\n     */\n    async updateCache(): Promise<void> {\n        await this.initDefaults();\n\n        /**\n         * Need to prepare this object to pass the plugins array through RPC.\n         *\n         * https://github.com/eclipse-theia/theia/issues/4310\n         * https://github.com/eclipse-theia/theia/issues/4757\n         * https://github.com/eclipse-theia/theia/issues/4343\n         */\n        const registries: ChePluginRegistries = {};\n        for (let i = 0; i < this.registryList.length; i++) {\n            const registry = this.registryList[i];\n            registries[registry.name] = registry;\n        }\n\n        await this.chePluginService.updateCache(registries);\n    }\n\n    /**\n     * Returns plugin list from active registry\n     */\n    async getPlugins(filter: string): Promise<ChePlugin[]> {\n        await this.initDefaults();\n\n        if (PluginFilter.hasType(filter, '@builtin')) {\n            try {\n                return await this.getBuiltInPlugins(filter);\n            } catch (error) {\n                console.log(error);\n                return [];\n            }\n        }\n\n        // Filter plugins if user requested the list of installed plugins\n        if (PluginFilter.hasType(filter, '@installed')) {\n            return await this.getInstalledPlugins(filter);\n        }\n\n        return await this.getAllPlugins(filter);\n    }\n\n    private async getBuiltInPlugins(filter: string): Promise<ChePlugin[]> {\n        const rawBuiltInPlugins = await this.pluginFrontentService.getBuiltInPlugins(filter);\n        return this.groupPlugins(rawBuiltInPlugins);\n    }\n\n    /**\n     * Returns the list of available plugins for the active plugin registry.\n     */\n    private async getAllPlugins(filter: string): Promise<ChePlugin[]> {\n        // get list of all plugins\n        const rawPlugins = await this.chePluginService.getPlugins(filter);\n\n        // group the plugins\n        const grouppedPlugins = this.groupPlugins(rawPlugins);\n\n        // prepare list of installed plugins without versions and repository URI\n        const installedPluginsInfo = this.getInstalledPluginsInfo();\n\n        // update `installed` field for all the plugin\n        // if the plugin is installed, we need to set the proper version\n        grouppedPlugins.forEach(plugin => {\n            const publisherName = `${plugin.publisher}/${plugin.name}`;\n            installedPluginsInfo.forEach(info => {\n                if (info.publisherName === publisherName) {\n                    // set plugin is installed\n                    plugin.installed = true;\n                    // set intalled version\n                    plugin.version = info.version;\n                }\n            });\n        });\n\n        return grouppedPlugins;\n    }\n\n    /**\n     * Returns the list of installed plugins\n     */\n    private async getInstalledPlugins(filter: string): Promise<ChePlugin[]> {\n        const rawPlugins: ChePluginMetadata[] = await this.chePluginService.getPlugins(filter);\n\n        // group the plugins\n        const grouppedPlugins = this.groupPlugins(rawPlugins);\n\n        // prepare list of installed plugins without versions and repository URI\n        const installedPluginsInfo = this.getInstalledPluginsInfo();\n\n        const installedPlugins: ChePlugin[] = [];\n\n        // update `installed` field for all the plugin\n        // if the plugin is installed, we ned to set the proper version\n        grouppedPlugins.forEach(plugin => {\n            const publisherName = `${plugin.publisher}/${plugin.name}`;\n            installedPluginsInfo.forEach(info => {\n                if (info.publisherName === publisherName) {\n                    // set plugin is installed\n                    plugin.installed = true;\n                    // set intalled version\n                    plugin.version = info.version;\n\n                    installedPlugins.push(plugin);\n                }\n            });\n        });\n\n        return installedPlugins;\n    }\n\n    /**\n     * Returns list of installed plugins including installed version.\n     *\n     * Plugin should be without version and must not include plugin source.\n     *\n     * Plugin record\n     *     camel-tooling/vscode-apache-camel/0.0.14\n     * must be replaced on\n     *     camel-tooling/vscode-apache-camel\n     *\n     * Plugin record\n     *     https://raw.githubusercontent.com/vitaliy-guliy/che-theia-plugin-registry/master/plugins/eclipse-che/tree-view-sample-plugin/0.0.1/meta.yaml\n     * must be replaced on\n     *     eclipse-che/tree-view-sample-plugin\n     */\n    private getInstalledPluginsInfo(): { publisherName: string, version: string }[] {\n        // prepare the list of registries\n        // we need to remove the registry URI from the start of the plugin\n        const registries: string[] = [];\n        this.registryList.forEach(registry => {\n            let uri = registry.uri;\n            if (uri === this.defaultRegistry.uri) {\n                return;\n            }\n\n            if (uri.endsWith('.json')) {\n                uri = uri.substring(0, uri.lastIndexOf('/') + 1);\n            } else if (!uri.endsWith('/')) {\n                uri += '/';\n            }\n\n            registries.push(uri);\n        });\n\n        const plugins: { publisherName: string, version: string }[] = [];\n        this.installedPlugins.forEach(plugin => {\n            if (plugin.endsWith('/meta.yaml')) {\n                // it's non default registry\n                // we have to remove '/meta.yaml' from the end\n                plugin = plugin.substring(0, plugin.lastIndexOf('/'));\n            }\n\n            const version = plugin.substring(plugin.lastIndexOf('/') + 1);\n\n            // remove the version by deleting all the text after the last '/' character, including '/'\n            plugin = plugin.substring(0, plugin.lastIndexOf('/'));\n\n            // remove registry URI from the start of the plugin\n            registries.forEach(r => {\n                if (plugin.startsWith(r)) {\n                    plugin = plugin.substring(r.length);\n                }\n            });\n\n            plugins.push({\n                publisherName: plugin,\n                version\n            });\n        });\n\n        return plugins;\n    }\n\n    /**\n     * Groups all versions of the same plugin in one structure.\n     */\n    private groupPlugins(rawPlugins: ChePluginMetadata[]): ChePlugin[] {\n        const pluginMap: { [pluginKey: string]: ChePlugin } = {};\n\n        rawPlugins.forEach(plugin => {\n            const pluginKey = `${plugin.publisher}/${plugin.name}`;\n            let installationItem = pluginMap[pluginKey];\n            if (!installationItem) {\n                installationItem = {\n                    publisher: plugin.publisher,\n                    name: plugin.name,\n                    version: plugin.version,\n                    installed: false,\n                    versionList: {}\n                };\n\n                pluginMap[pluginKey] = installationItem;\n            } else {\n                installationItem.version = plugin.version;\n            }\n\n            installationItem.versionList[plugin.version] = plugin;\n        });\n\n        const chePlugins: ChePlugin[] = [];\n        for (const key in pluginMap) {\n            if (pluginMap.hasOwnProperty(key)) {\n                chePlugins.push(pluginMap[key]);\n            }\n        }\n\n        return chePlugins;\n    }\n\n    /**\n     * Installs the plugin.\n     */\n    async install(plugin: ChePlugin): Promise<boolean> {\n        const metadata = plugin.versionList[plugin.version];\n\n        try {\n            // add the plugin to workspace configuration\n            await this.chePluginService.addPlugin(metadata.key);\n            this.messageService.info(`Plugin '${metadata.publisher}/${metadata.name}/${metadata.version}' has been successfully installed`);\n\n            // add the plugin to the list of workspace plugins\n            this.installedPlugins.push(metadata.key);\n\n            // notify that workspace configuration has been changed\n            this.notifyWorkspaceConfigurationChanged();\n            return true;\n        } catch (error) {\n            this.messageService.error(`Unable to install plugin '${metadata.publisher}/${metadata.name}/${metadata.version}'. ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Removes the plugin.\n     */\n    async remove(plugin: ChePlugin): Promise<boolean> {\n        const metadata = plugin.versionList[plugin.version];\n\n        try {\n            // remove the plugin from workspace configuration\n            await this.chePluginService.removePlugin(metadata.key);\n            this.messageService.info(`Plugin '${metadata.publisher}/${metadata.name}/${metadata.version}' has been successfully removed`);\n\n            // remove the plugin from the list of workspace plugins\n            this.installedPlugins = this.installedPlugins.filter(p => p !== metadata.key);\n\n            // notify that workspace configuration has been changed\n            this.notifyWorkspaceConfigurationChanged();\n            return true;\n        } catch (error) {\n            this.messageService.error(`Unable to remove plugin '${metadata.publisher}/${metadata.name}/${metadata.version}'. ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Changes the plugin version.\n     */\n    async changeVersion(plugin: ChePlugin, versionBefore: string): Promise<boolean> {\n        const metadataBefore = plugin.versionList[versionBefore];\n        const metadata = plugin.versionList[plugin.version];\n        try {\n            await this.chePluginService.updatePlugin(metadataBefore.key, metadata.key);\n\n            this.messageService.info(`Plugin '${metadata.publisher}/${metadata.name}' has been successfully updated`);\n\n            // remove old plugin from the list of workspace plugins\n            this.installedPlugins = this.installedPlugins.filter(p => p !== metadataBefore.key);\n\n            // add new plugin to the list of workspace plugins\n            this.installedPlugins.push(metadata.key);\n\n            // notify that workspace configuration has been changed\n            this.notifyWorkspaceConfigurationChanged();\n            return true;\n        } catch (error) {\n            this.messageService.error(`Unable to upate plugin '${metadata.publisher}/${metadata.name}'. ${error.message}`);\n            return false;\n        }\n    }\n\n    private getIdPublisher(input: string): string {\n        if (input.startsWith('ext install ')) {\n            // check for 'ext install rebornix.Ruby'\n            return input.substring('ext install '.length);\n        } else if (input.startsWith('vscode:extension/')) {\n            // check for 'vscode:extension/rebornix.Ruby'\n            return input.substring('vscode:extension/'.length);\n        }\n\n        return '';\n    }\n\n    /**\n     * Installs VS Code extension.\n     */\n    async installVSCodeExtension(command: string): Promise<boolean> {\n        const idPublisher = this.getIdPublisher(command);\n        try {\n            await this.pluginServer.deploy(command);\n            this.messageService.info(`VS Code plugin '${idPublisher}' has been installed`);\n            return true;\n        } catch (error) {\n            this.messageService.error(`Unable to install VS Code plugin '${idPublisher}'`);\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `input` is a command to install VS Code extension.\n     *\n     * Returns VS Code extension `publisher.ID`\n     */\n    checkVsCodeExtension(input: string): string | undefined {\n        try {\n            const idPublisher = this.getIdPublisher(input);\n            if (idPublisher) {\n                const parts = idPublisher.split('.');\n                if (parts.length === 2 && parts[0] && parts[1]) {\n                    return idPublisher;\n                }\n            }\n        } catch (error) {\n            console.log(error);\n        }\n\n        return undefined;\n    }\n\n    private notifyWorkspaceConfigurationChanged(): void {\n        setTimeout(() => {\n            this.workspaceConfigurationChangedEvent.fire();\n        }, 500);\n    }\n\n    /**\n     * Checks whether IDE is opened inside frame in dashboard.\n     * If yes, IDE can send request to the dashboard to restart the workspace.\n     */\n    restartEnabled(): boolean {\n        return window.parent !== window;\n    }\n\n    async restartWorkspace(): Promise<void> {\n        const confirm = new ConfirmDialog({\n            title: 'Restart Workspace',\n            msg: 'Are you sure you want to restart your workspace?',\n            ok: 'Restart'\n        });\n\n        if (await confirm.open()) {\n            // get workspace ID\n            const cheWorkspaceID = await this.envVariablesServer.getValue('CHE_WORKSPACE_ID');\n            // get machine token\n            const cheMachineToken = await this.envVariablesServer.getValue('CHE_MACHINE_TOKEN');\n            if (cheWorkspaceID && cheWorkspaceID.value) {\n                this.messageService.info('Workspace is restarting...');\n                const cheMachineTokenValue = cheMachineToken && cheMachineToken.value ? cheMachineToken.value : '';\n                // ask Dashboard to restart the workspace giving him workspace ID & machine token\n                window.parent.postMessage(`restart-workspace:${cheWorkspaceID.value}:${cheMachineTokenValue}`, '*');\n            }\n        }\n    }\n\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-menu.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-preferences.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-service-client.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view-contribution.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view-list.tsx",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view-toolbar.tsx",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/plugin/che-plugin-view.tsx",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/task-config-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/browser/task-status-handler.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/che-plugin-protocol.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/che-protocol.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/che-server-common.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/common/plugin/plugin-filter.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-api-service.ts",["277"],"/*********************************************************************\n * Copyright (c) 2018 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\nimport { CheApiService, Preferences, WorkspaceSettings } from '../common/che-protocol';\nimport { che as cheApi } from '@eclipse-che/api';\nimport WorkspaceClient, { IRestAPIConfig, IRemoteAPI } from '@eclipse-che/workspace-client';\nimport { injectable } from 'inversify';\n\nimport { SS_CRT_PATH } from './che-https';\n\nimport { TelemetryClient, Event, EventProperty } from '@eclipse-che/workspace-telemetry-client';\n\nconst ENV_WORKSPACE_ID_IS_NOT_SET = 'Environment variable CHE_WORKSPACE_ID is not set';\n\n@injectable()\nexport class CheApiServiceImpl implements CheApiService {\n\n    private workspaceRestAPI: IRemoteAPI | undefined;\n    private telemetryClient: TelemetryClient | undefined = this.getWorkspaceTelemetryClient();\n\n    async getCurrentWorkspaceId(): Promise<string> {\n        return this.getWorkspaceIdFromEnv();\n    }\n\n    async getCheApiURI(): Promise<string | undefined> {\n        return process.env.CHE_API_INTERNAL;\n    }\n\n    async getUserId(token?: string): Promise<string> {\n        const cheApiClient = await this.getCheApiClient();\n        const user = await cheApiClient.getCurrentUser(token);\n        return user.id;\n    }\n\n    async getUserPreferences(filter?: string): Promise<Preferences> {\n        const cheApiClient = await this.getCheApiClient();\n        return cheApiClient.getUserPreferences(filter);\n    }\n\n    async updateUserPreferences(update: Preferences): Promise<Preferences> {\n        const cheApiClient = await this.getCheApiClient();\n        return cheApiClient.updateUserPreferences(update);\n    }\n\n    async replaceUserPreferences(preferences: Preferences): Promise<Preferences> {\n        const cheApiClient = await this.getCheApiClient();\n        return cheApiClient.replaceUserPreferences(preferences);\n    }\n\n    async deleteUserPreferences(list?: string[]): Promise<void> {\n        const cheApiClient = await this.getCheApiClient();\n        return cheApiClient.deleteUserPreferences(list);\n    }\n\n    async getWorkspaceSettings(): Promise<WorkspaceSettings> {\n        const cheApiClient = await this.getCheApiClient();\n        return cheApiClient.getSettings();\n    }\n\n    async currentWorkspace(): Promise<cheApi.workspace.Workspace> {\n        try {\n            const workspaceId = process.env.CHE_WORKSPACE_ID;\n            if (!workspaceId) {\n                return Promise.reject(ENV_WORKSPACE_ID_IS_NOT_SET);\n            }\n\n            const cheApiClient = await this.getCheApiClient();\n            if (cheApiClient) {\n                return await cheApiClient.getById<cheApi.workspace.Workspace>(workspaceId);\n            }\n\n            return Promise.reject('Cannot create Che API REST Client');\n        } catch (e) {\n            console.log(e);\n            return Promise.reject('Cannot create Che API REST Client');\n        }\n    }\n\n    async getWorkspaceById(workspaceId: string): Promise<cheApi.workspace.Workspace> {\n        try {\n            if (!workspaceId) {\n                return Promise.reject('Che Workspace id is not set');\n            }\n\n            const cheApiClient = await this.getCheApiClient();\n            if (cheApiClient) {\n                return await cheApiClient.getById<cheApi.workspace.Workspace>(workspaceId);\n            }\n\n            return Promise.reject('Cannot create Che API REST Client');\n        } catch (e) {\n            console.log(e);\n            return Promise.reject('Cannot create Che API REST Client');\n        }\n    }\n\n    async updateWorkspace(workspaceId: string, workspace: cheApi.workspace.Workspace): Promise<cheApi.workspace.Workspace> {\n        try {\n            if (!workspaceId) {\n                return Promise.reject('Che Workspace id is not set');\n            }\n\n            const cheApiClient = await this.getCheApiClient();\n            if (cheApiClient) {\n                return await cheApiClient.update(workspaceId, workspace);\n            }\n\n            return Promise.reject('Cannot create Che API REST Client');\n        } catch (e) {\n            console.log(e);\n            return Promise.reject('Cannot create Che API REST Client');\n        }\n    }\n\n    async updateWorkspaceActivity(): Promise<void> {\n        try {\n            const cheApiClient = await this.getCheApiClient();\n            return cheApiClient.updateActivity(this.getWorkspaceIdFromEnv());\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async stop(): Promise<void> {\n        const workspaceId = process.env.CHE_WORKSPACE_ID;\n        if (!workspaceId) {\n            return Promise.reject(ENV_WORKSPACE_ID_IS_NOT_SET);\n        }\n\n        const cheApiClient = await this.getCheApiClient();\n        return await cheApiClient.stop(workspaceId);\n    }\n\n    async getCurrentWorkspacesContainers(): Promise<{ [key: string]: cheApi.workspace.Machine }> {\n        const result: { [key: string]: cheApi.workspace.Machine } = {};\n        try {\n            const workspace = await this.currentWorkspace();\n            const containers = workspace.runtime!.machines;\n            if (containers) {\n                for (const containerName of Object.keys(containers)) {\n                    const container = containers[containerName];\n                    if (container) {\n                        result[containerName] = container;\n                    }\n                }\n            }\n        } catch (e) {\n            throw new Error(`Unable to get workspace containers. Cause: ${e}`);\n        }\n        return result;\n    }\n\n    async findUniqueServerByAttribute(attributeName: string, attributeValue: string): Promise<cheApi.workspace.Server> {\n        const containers = await this.getCurrentWorkspacesContainers();\n        try {\n            if (containers) {\n                for (const containerName of Object.keys(containers)) {\n                    const servers = containers[containerName].servers;\n                    if (servers) {\n                        for (const serverName of Object.keys(servers)) {\n                            const server = servers[serverName];\n                            if (server && server.attributes && server.attributes[attributeName] === attributeValue) {\n                                return server;\n                            }\n                        }\n                    }\n                }\n            }\n            return Promise.reject(`Server by attributes '${attributeName}'='${attributeValue}' was not found.`);\n        } catch (e) {\n            return Promise.reject(`Unable to get workspace servers. Cause: ${e}`);\n        }\n    }\n\n    async getFactoryById(factoryId: string): Promise<cheApi.factory.Factory> {\n        try {\n            const client = await this.getCheApiClient();\n            if (client) {\n                return await client.getFactory<cheApi.factory.Factory>(factoryId);\n            }\n\n            return Promise.reject(`Unable to get factory with ID ${factoryId}`);\n        } catch (e) {\n            return Promise.reject('Unable to create Che API REST Client');\n        }\n    }\n\n    async generateSshKey(service: string, name: string): Promise<cheApi.ssh.SshPair> {\n        try {\n            const client = await this.getCheApiClient();\n            if (client) {\n                return client.generateSshKey(service, name);\n            }\n\n            throw new Error(`Unable to generate SSH Key for ${service}:${name}`);\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async createSshKey(sshKeyPair: cheApi.ssh.SshPair): Promise<void> {\n        try {\n            const client = await this.getCheApiClient();\n            if (client) {\n                return client.createSshKey(sshKeyPair);\n            }\n\n            throw new Error('Unable to create SSH Key');\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async getSshKey(service: string, name: string): Promise<cheApi.ssh.SshPair> {\n        try {\n            const client = await this.getCheApiClient();\n            if (client) {\n                return await client.getSshKey(service, name);\n            }\n\n            throw new Error(`Unable to get SSH Key for ${service}:${name}`);\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async getAllSshKey(service: string): Promise<cheApi.ssh.SshPair[]> {\n        try {\n            const client = await this.getCheApiClient();\n            if (client) {\n                return client.getAllSshKey(service);\n            }\n            throw new Error(`Unable to get SSH Keys for ${service}`);\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async deleteSshKey(service: string, name: string): Promise<void> {\n        try {\n            const client = await this.getCheApiClient();\n            if (client) {\n                return client.deleteSshKey(service, name);\n            }\n            throw new Error(`Unable to delete SSH Key for ${service}:${name}`);\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async submitTelemetryEvent(id: string, ownerId: string, ip: string, agent: string, resolution: string, properties: [string, string][]): Promise<void> {\n        try {\n            const event: Event = {\n                id: id,\n                ip: ip,\n                ownerId: ownerId,\n                agent: agent,\n                resolution: resolution,\n                properties: properties.map((prop: [string, string]) => {\n                    const eventProp: EventProperty = {\n                        id: prop[0],\n                        value: prop[1]\n                    };\n                    return eventProp;\n                })\n            };\n            if (this.telemetryClient) {\n                await this.telemetryClient.event(event);\n            }\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async submitTelemetryActivity(): Promise<void> {\n        try {\n            if (this.telemetryClient) {\n                await this.telemetryClient.activity();\n            }\n        } catch (e) {\n            console.error(e);\n            throw new Error(e);\n        }\n    }\n\n    async getOAuthToken(oAuthProvider: string, token?: string): Promise<string | undefined> {\n        const cheApiClient = await this.getCheApiClient();\n        return cheApiClient.getOAuthToken(oAuthProvider, token);\n    }\n\n    async getOAuthProviders(token?: string): Promise<string[]> {\n        const cheApiClient = await this.getCheApiClient();\n        try {\n            return await cheApiClient.getOAuthProviders(token);\n        } catch (e) {\n            return [];\n        }\n    }\n\n    private getWorkspaceTelemetryClient(): TelemetryClient | undefined {\n\n        if (!this.telemetryClient) {\n            const cheWorkspaceTelemetryBackendPortVar = process.env.CHE_WORKSPACE_TELEMETRY_BACKEND_PORT;\n\n            if (!cheWorkspaceTelemetryBackendPortVar) {\n                console.error('Unable to create Che API REST Client: \"CHE_WORKSPACE_TELEMETRY_BACKEND_PORT\" is not set.');\n                return undefined;\n            }\n\n            this.telemetryClient = new TelemetryClient(undefined, 'http://localhost:' + cheWorkspaceTelemetryBackendPortVar);\n        }\n\n        return this.telemetryClient;\n    }\n\n    private async getCheApiClient(): Promise<IRemoteAPI> {\n        const cheApiInternalVar = process.env.CHE_API_INTERNAL;\n        const cheMachineToken = process.env.CHE_MACHINE_TOKEN;\n\n        if (!cheApiInternalVar) {\n            return Promise.reject('Unable to create Che API REST Client: \"CHE_API_INTERNAL\" is not set.');\n        }\n\n        if (!this.workspaceRestAPI) {\n            const restAPIConfig: IRestAPIConfig = {\n                baseUrl: cheApiInternalVar,\n                headers: {}\n            };\n            if (cheMachineToken) {\n                restAPIConfig.headers['Authorization'] = 'Bearer ' + cheMachineToken;\n            }\n            restAPIConfig.ssCrtPath = SS_CRT_PATH;\n\n            this.workspaceRestAPI = WorkspaceClient.getRestApi(restAPIConfig);\n        }\n\n        return this.workspaceRestAPI;\n    }\n\n    private getWorkspaceIdFromEnv(): string {\n        const workspaceId = process.env.CHE_WORKSPACE_ID;\n        if (!workspaceId) {\n            throw new Error(ENV_WORKSPACE_ID_IS_NOT_SET);\n        }\n\n        return workspaceId;\n    }\n\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-backend-module.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-client-ip-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-https.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-plugin-api-provider.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-plugin-script-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-plugin-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-product-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/che-task-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/node/plugin-service.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-api.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-devfile.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-factory.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-github.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-oauth.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-openshift.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-product.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-sidecar-content-reader.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-ssh.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-task-impl.ts",["278"],"/*********************************************************************\n * Copyright (c) 2018 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\nimport { Disposable, TaskConfiguration, TaskExitedEvent, TaskInfo, TaskJSONSchema, TaskRunner, TaskStatusOptions } from '@eclipse-che/plugin';\nimport { Emitter } from '@theia/core/lib/common/event';\nimport { RPCProtocol } from '@theia/plugin-ext/lib/common/rpc-protocol';\nimport { CheTask, CheTaskMain, PLUGIN_RPC_CONTEXT } from '../common/che-protocol';\n\nexport enum TaskStatus {\n    Success = 'SUCCESS',\n    InProgress = 'IN_PROGRESS',\n    Error = 'ERROR',\n    Unknown = 'UNKNOWN'\n}\n\nexport enum TaskTerminallKind {\n    Task = 'task',\n    RemoteTask = 'remote-task'\n}\n\nexport class CheTaskImpl implements CheTask {\n    private readonly cheTaskMain: CheTaskMain;\n    private readonly runnerMap: Map<string, TaskRunner>;\n\n    private readonly onDidStartTaskEmitter = new Emitter<TaskInfo>();\n    readonly onDidStartTask = this.onDidStartTaskEmitter.event;\n\n    private readonly onDidEndTaskEmitter = new Emitter<TaskExitedEvent>();\n    readonly onDidEndTask = this.onDidEndTaskEmitter.event;\n\n    constructor(rpc: RPCProtocol) {\n        this.cheTaskMain = rpc.getProxy(PLUGIN_RPC_CONTEXT.CHE_TASK_MAIN);\n        this.runnerMap = new Map();\n    }\n    async registerTaskRunner(type: string, runner: TaskRunner): Promise<Disposable> {\n        this.runnerMap.set(type, runner);\n        await this.cheTaskMain.$registerTaskRunner(type);\n        return {\n            dispose: async () => {\n                await this.cheTaskMain.$disposeTaskRunner(type);\n            }\n        };\n    }\n\n    async $runTask(config: TaskConfiguration, ctx?: string): Promise<TaskInfo> {\n        const runner = this.runnerMap.get(config.type);\n        if (runner) {\n            return await runner.run(config, ctx);\n        }\n        throw new Error(`Task Runner for type ${config.type} is not found.`);\n    }\n\n    async $killTask(taskInfo: TaskInfo): Promise<void> {\n        const runner = this.runnerMap.get(taskInfo.config.type);\n        if (runner) {\n            return runner.kill(taskInfo);\n        }\n        throw new Error(`Failed to terminate Che command: ${taskInfo.config.label}: the corresponging executor is not found`);\n    }\n\n    async fireTaskExited(event: TaskExitedEvent): Promise<void> {\n        this.cheTaskMain.$fireTaskExited(event);\n    }\n\n    async addTaskSubschema(schema: TaskJSONSchema): Promise<void> {\n        return this.cheTaskMain.$addTaskSubschema(schema);\n    }\n\n    async setTaskStatus(options: TaskStatusOptions): Promise<void> {\n        return this.cheTaskMain.$setTaskStatus(options);\n    }\n\n    async $onDidStartTask(taskInfo: TaskInfo): Promise<void> {\n        this.onDidStartTaskEmitter.fire(taskInfo);\n    }\n\n    async $onDidEndTask(event: TaskExitedEvent): Promise<void> {\n        this.onDidEndTaskEmitter.fire(event);\n    }\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-telemetry.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-user.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-variables.ts",["279"],"/*********************************************************************\n * Copyright (c) 2018 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\n\nimport { RPCProtocol } from '@theia/plugin-ext/lib/common/rpc-protocol';\nimport { PLUGIN_RPC_CONTEXT, CheVariables, CheVariablesMain } from '../common/che-protocol';\nimport * as che from '@eclipse-che/plugin';\n\nexport class CheVariablesImpl implements CheVariables {\n\n    private readonly cheVariablesMain: CheVariablesMain;\n    private readonly variablesCache = new Map<number, che.Variable>();\n    private callId = 0;\n\n    constructor(rpc: RPCProtocol) {\n        this.cheVariablesMain = rpc.getProxy(PLUGIN_RPC_CONTEXT.CHE_VARIABLES_MAIN);\n    }\n\n    async registerVariable(variable: che.Variable): Promise<che.Disposable> {\n        const token = this.addNewVariable(variable);\n        await this.cheVariablesMain.$registerVariable({\n            name: variable.name,\n            description: variable.description,\n            token\n        });\n        return {\n            dispose: async () => {\n                await this.cheVariablesMain.$disposeVariable(token);\n                this.variablesCache.delete(token);\n            }\n        };\n    }\n\n    private addNewVariable(variable: che.Variable): number {\n        const callId = this.callId++;\n        this.variablesCache.set(callId, variable);\n        return callId;\n    }\n\n    resolve(value: string): Promise<string | undefined> {\n        return this.cheVariablesMain.$resolve(value);\n    }\n\n    async $resolveVariable(variableId: number): Promise<string | undefined> {\n        const variable = this.variablesCache.get(variableId);\n        if (variable) {\n            if (variable.isResolved && variable.value) {\n                return variable.value;\n            }\n            return await variable.resolve();\n        }\n    }\n\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/che-workspace.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/node/che-api-node-provider.ts",[],"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/eclipse-che-theia-plugin-ext/src/plugin/webworker/che-api-worker-provider.ts",[],{"ruleId":"280","severity":1,"message":"281","line":24,"column":16,"nodeType":"282","endLine":24,"endColumn":57},{"ruleId":"280","severity":1,"message":"281","line":25,"column":88,"nodeType":"282","endLine":25,"endColumn":127},{"ruleId":"280","severity":1,"message":"281","line":38,"column":16,"nodeType":"282","endLine":38,"endColumn":80},{"ruleId":"280","severity":1,"message":"281","line":68,"column":16,"nodeType":"282","endLine":68,"endColumn":96},{"ruleId":"280","severity":1,"message":"281","line":72,"column":16,"nodeType":"282","endLine":72,"endColumn":85},{"ruleId":"280","severity":1,"message":"281","line":201,"column":20,"nodeType":"282","endLine":201,"endColumn":58},{"ruleId":"280","severity":1,"message":"281","line":204,"column":16,"nodeType":"282","endLine":204,"endColumn":48},{"ruleId":"280","severity":1,"message":"281","line":138,"column":16,"nodeType":"282","endLine":138,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":54,"column":20,"nodeType":"282","endLine":54,"endColumn":49},{"ruleId":"280","severity":1,"message":"281","line":56,"column":20,"nodeType":"282","endLine":56,"endColumn":44},"no-return-await","Redundant use of `await` on a return value.","Identifier"]