{"version":3,"sources":["webpack:///../node_modules/@theia/preferences/src/browser/abstract-resource-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/folder-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/folders-preferences-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/preference-bindings.ts","webpack:///../node_modules/@theia/preferences/src/browser/preference-editor-widget.ts","webpack:///../node_modules/@theia/preferences/src/browser/preference-frontend-module.ts","webpack:///../node_modules/@theia/preferences/src/browser/preference-tree-container.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-contribution.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-decorator-service.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-decorator.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-frontend-application-contribution.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-menu-factory.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-monaco-contribution.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-tree-widget.ts","webpack:///../node_modules/@theia/preferences/src/browser/user-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/workspace-file-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/workspace-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/style/index.css?ee74","webpack:///../node_modules/@theia/userstorage/src/browser/index.ts","webpack:///../node_modules/@theia/preferences/src/browser/style/index.css"],"names":[],"mappings":"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","file":"27.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-null/no-null */\n\nimport * as jsoncparser from 'jsonc-parser';\nimport { JSONExt } from '@phosphor/coreutils/lib/json';\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { PreferenceProvider, PreferenceSchemaProvider, PreferenceScope, PreferenceProviderDataChange, PreferenceService } from '@theia/core/lib/browser';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { MonacoTextModelService } from '@theia/monaco/lib/browser/monaco-text-model-service';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { MonacoWorkspace } from '@theia/monaco/lib/browser/monaco-workspace';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\n\n@injectable()\nexport abstract class AbstractResourcePreferenceProvider extends PreferenceProvider {\n\n    protected preferences: { [key: string]: any } = {};\n    protected model: MonacoEditorModel | undefined;\n    protected readonly loading = new Deferred();\n\n    @inject(PreferenceService) protected readonly preferenceService: PreferenceService;\n    @inject(MessageService) protected readonly messageService: MessageService;\n    @inject(PreferenceSchemaProvider) protected readonly schemaProvider: PreferenceSchemaProvider;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    @inject(MonacoTextModelService)\n    protected readonly textModelService: MonacoTextModelService;\n\n    @inject(MonacoWorkspace)\n    protected readonly workspace: MonacoWorkspace;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        const uri = this.getUri();\n        this.toDispose.push(Disposable.create(() => this.loading.reject(new Error(`preference provider for '${uri}' was disposed`))));\n        this._ready.resolve();\n\n        const reference = await this.textModelService.createModelReference(uri);\n        if (this.toDispose.disposed) {\n            reference.dispose();\n            return;\n        }\n\n        this.model = reference.object;\n        this.loading.resolve();\n\n        this.toDispose.push(reference);\n        this.toDispose.push(Disposable.create(() => this.model = undefined));\n\n        this.readPreferences();\n        this.toDispose.push(this.model.onDidChangeContent(() => this.readPreferences()));\n        this.toDispose.push(this.model.onDirtyChanged(() => this.readPreferences()));\n        this.toDispose.push(this.model.onDidChangeValid(() => this.readPreferences()));\n\n        this.toDispose.push(Disposable.create(() => this.reset()));\n    }\n\n    protected abstract getUri(): URI;\n    protected abstract getScope(): PreferenceScope;\n\n    protected get valid(): boolean {\n        return this.model && this.model.valid || false;\n    }\n\n    getConfigUri(): URI;\n    getConfigUri(resourceUri: string | undefined): URI | undefined;\n    getConfigUri(resourceUri?: string): URI | undefined {\n        if (!resourceUri) {\n            return this.getUri();\n        }\n        return this.valid && this.contains(resourceUri) ? this.getUri() : undefined;\n    }\n\n    contains(resourceUri: string | undefined): boolean {\n        if (!resourceUri) {\n            return true;\n        }\n        const domain = this.getDomain();\n        if (!domain) {\n            return true;\n        }\n        const resourcePath = new URI(resourceUri).path;\n        return domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n    }\n\n    getPreferences(resourceUri?: string): { [key: string]: any } {\n        return this.valid && this.contains(resourceUri) ? this.preferences : {};\n    }\n\n    async setPreference(key: string, value: any, resourceUri?: string): Promise<boolean> {\n        await this.loading.promise;\n        if (!this.model) {\n            return false;\n        }\n        if (!this.contains(resourceUri)) {\n            return false;\n        }\n        const path = this.getPath(key);\n        if (!path) {\n            return false;\n        }\n        try {\n            const content = this.model.getText().trim();\n            if (!content && value === undefined) {\n                return true;\n            }\n            const textModel = this.model.textEditorModel;\n            const editOperations: monaco.editor.IIdentifiedSingleEditOperation[] = [];\n            if (path.length || value !== undefined) {\n                const { insertSpaces, tabSize, defaultEOL } = textModel.getOptions();\n                for (const edit of jsoncparser.modify(content, path, value, {\n                    formattingOptions: {\n                        insertSpaces,\n                        tabSize,\n                        eol: defaultEOL === monaco.editor.DefaultEndOfLine.LF ? '\\n' : '\\r\\n'\n                    }\n                })) {\n                    const start = textModel.getPositionAt(edit.offset);\n                    const end = textModel.getPositionAt(edit.offset + edit.length);\n                    editOperations.push({\n                        range: monaco.Range.fromPositions(start, end),\n                        text: edit.content || null,\n                        forceMoveMarkers: false\n                    });\n                }\n            } else {\n                editOperations.push({\n                    range: textModel.getFullModelRange(),\n                    text: null,\n                    forceMoveMarkers: false\n                });\n            }\n            await this.workspace.applyBackgroundEdit(this.model, editOperations);\n            return true;\n        } catch (e) {\n            const message = `Failed to update the value of '${key}' in '${this.getUri()}'.`;\n            this.messageService.error(`${message} Please check if it is corrupted.`);\n            console.error(`${message}`, e);\n            return false;\n        }\n    }\n\n    protected getPath(preferenceName: string): string[] | undefined {\n        return [preferenceName];\n    }\n\n    /**\n     * It HAS to be sync to ensure that `setPreference` returns only when values are updated\n     * or any other operation modifying the monaco model content.\n     */\n    protected readPreferences(): void {\n        const model = this.model;\n        if (!model || model.dirty) {\n            return;\n        }\n        try {\n            let preferences;\n            if (model.valid) {\n                const content = model.getText();\n                preferences = this.getParsedContent(content);\n            } else {\n                preferences = {};\n            }\n            this.handlePreferenceChanges(preferences);\n        } catch (e) {\n            console.error(`Failed to load preferences from '${this.getUri()}'.`, e);\n        }\n    }\n\n    protected getParsedContent(content: string): { [key: string]: any } {\n        const jsonData = this.parse(content);\n\n        const preferences: { [key: string]: any } = {};\n        if (typeof jsonData !== 'object') {\n            return preferences;\n        }\n        // eslint-disable-next-line guard-for-in\n        for (const preferenceName in jsonData) {\n            const preferenceValue = jsonData[preferenceName];\n            if (this.schemaProvider.testOverrideValue(preferenceName, preferenceValue)) {\n                // eslint-disable-next-line guard-for-in\n                for (const overriddenPreferenceName in preferenceValue) {\n                    const overriddenValue = preferenceValue[overriddenPreferenceName];\n                    preferences[`${preferenceName}.${overriddenPreferenceName}`] = overriddenValue;\n                }\n            } else {\n                preferences[preferenceName] = preferenceValue;\n            }\n        }\n        return preferences;\n    }\n\n    protected parse(content: string): any {\n        content = content.trim();\n        if (!content) {\n            return undefined;\n        }\n        const strippedContent = jsoncparser.stripComments(content);\n        return jsoncparser.parse(strippedContent);\n    }\n\n    protected handlePreferenceChanges(newPrefs: { [key: string]: any }): void {\n        const oldPrefs = Object.assign({}, this.preferences);\n        this.preferences = newPrefs;\n        const prefNames = new Set([...Object.keys(oldPrefs), ...Object.keys(newPrefs)]);\n        const prefChanges: PreferenceProviderDataChange[] = [];\n        const uri = this.getUri();\n        for (const prefName of prefNames.values()) {\n            const oldValue = oldPrefs[prefName];\n            const newValue = newPrefs[prefName];\n            const schemaProperties = this.schemaProvider.getCombinedSchema().properties[prefName];\n            if (schemaProperties) {\n                const scope = schemaProperties.scope;\n                // do not emit the change event if the change is made out of the defined preference scope\n                if (!this.schemaProvider.isValidInScope(prefName, this.getScope())) {\n                    console.warn(`Preference ${prefName} in ${uri} can only be defined in scopes: ${PreferenceScope.getScopeNames(scope).join(', ')}.`);\n                    continue;\n                }\n            }\n            if (newValue === undefined && oldValue !== newValue\n                || oldValue === undefined && newValue !== oldValue // JSONExt.deepEqual() does not support handling `undefined`\n                || !JSONExt.deepEqual(oldValue, newValue)) {\n                prefChanges.push({\n                    preferenceName: prefName, newValue, oldValue, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n\n        if (prefChanges.length > 0) { // do not emit the change event if the pref value is not changed\n            this.emitPreferencesChangedEvent(prefChanges);\n        }\n    }\n\n    protected reset(): void {\n        const preferences = this.preferences;\n        this.preferences = {};\n        const changes: PreferenceProviderDataChange[] = [];\n        for (const prefName of Object.keys(preferences)) {\n            const value = preferences[prefName];\n            if (value !== undefined) {\n                changes.push({\n                    preferenceName: prefName, newValue: undefined, oldValue: value, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n        if (changes.length > 0) {\n            this.emitPreferencesChangedEvent(changes);\n        }\n    }\n\n}\n\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { FileStat } from '@theia/filesystem/lib/common';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\n\nexport const FolderPreferenceProviderFactory = Symbol('FolderPreferenceProviderFactory');\nexport interface FolderPreferenceProviderFactory {\n    (options: FolderPreferenceProviderOptions): FolderPreferenceProvider;\n}\n\nexport const FolderPreferenceProviderOptions = Symbol('FolderPreferenceProviderOptions');\nexport interface FolderPreferenceProviderOptions {\n    readonly folder: FileStat;\n    readonly configUri: URI;\n}\n\n@injectable()\nexport class FolderPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n    @inject(FolderPreferenceProviderOptions) protected readonly options: FolderPreferenceProviderOptions;\n\n    private _folderUri: URI;\n\n    get folderUri(): URI {\n        if (!this._folderUri) {\n            this._folderUri = new URI(this.options.folder.uri);\n        }\n        return this._folderUri;\n    }\n\n    protected getUri(): URI {\n        return this.options.configUri;\n    }\n\n    protected getScope(): PreferenceScope {\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            // when FolderPreferenceProvider is used as a delegate of WorkspacePreferenceProvider in a one-folder workspace\n            return PreferenceScope.Workspace;\n        }\n        return PreferenceScope.Folder;\n    }\n\n    getDomain(): string[] {\n        return [this.folderUri.toString()];\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult } from '@theia/core/lib/browser/preferences/preference-provider';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory, FolderPreferenceProviderOptions } from './folder-preference-provider';\n\n@injectable()\nexport class FoldersPreferencesProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(FolderPreferenceProviderFactory)\n    protected readonly folderPreferenceProviderFactory: FolderPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, FolderPreferenceProvider>();\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        await this.workspaceService.roots;\n\n        this.updateProviders();\n        this.workspaceService.onWorkspaceChanged(() => this.updateProviders());\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected updateProviders(): void {\n        const roots = this.workspaceService.tryGetRoots();\n        const toDelete = new Set(this.providers.keys());\n        for (const folder of roots) {\n            for (const configPath of this.configurations.getPaths()) {\n                for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n                    const configUri = this.configurations.createUri(new URI(folder.uri), configPath, configName);\n                    const key = configUri.toString();\n                    toDelete.delete(key);\n                    if (!this.providers.has(key)) {\n                        const provider = this.createProvider({ folder, configUri });\n                        this.providers.set(key, provider);\n                    }\n                }\n            }\n        }\n        for (const key of toDelete) {\n            const provider = this.providers.get(key);\n            if (provider) {\n                this.providers.delete(key);\n                provider.dispose();\n            }\n        }\n    }\n\n    getConfigUri(resourceUri?: string): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (this.configurations.isConfigUri(configUri)) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    getContainingConfigUri(resourceUri?: string): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri();\n            if (this.configurations.isConfigUri(configUri) && provider.contains(resourceUri)) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    getDomain(): string[] {\n        return this.workspaceService.tryGetRoots().map(root => root.uri);\n    }\n\n    resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n                if (configUri && value !== undefined) {\n                    result.configUri = configUri;\n                    result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                if (provider.getConfigUri(resourceUri)) {\n                    const preferences = provider.getPreferences();\n                    result = PreferenceProvider.merge(result, preferences) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const sectionName = preferenceName.split('.', 1)[0];\n        const configName = this.configurations.isSectionName(sectionName) ? sectionName : this.configurations.getConfigName();\n\n        const providers = this.getFolderProviders(resourceUri);\n        let configPath: string | undefined;\n\n        const iterator: (() => FolderPreferenceProvider | undefined)[] = [];\n        for (const provider of providers) {\n            if (configPath === undefined) {\n                const configUri = provider.getConfigUri(resourceUri);\n                if (configUri) {\n                    configPath = this.configurations.getPath(configUri);\n                }\n            }\n            if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                iterator.push(() => {\n                    if (provider.getConfigUri(resourceUri)) {\n                        return provider;\n                    }\n                    iterator.push(() => {\n                        if (this.configurations.getPath(provider.getConfigUri()) === configPath) {\n                            return provider;\n                        }\n                        iterator.push(() => provider);\n                    });\n                });\n            }\n        }\n\n        let next = iterator.shift();\n        while (next) {\n            const provider = next();\n            if (provider) {\n                if (await provider.setPreference(preferenceName, value, resourceUri)) {\n                    return true;\n                }\n            }\n            next = iterator.shift();\n        }\n        return false;\n    }\n\n    protected groupProvidersByConfigName(resourceUri?: string): Map<string, FolderPreferenceProvider[]> {\n        const groups = new Map<string, FolderPreferenceProvider[]>();\n        const providers = this.getFolderProviders(resourceUri);\n        for (const configName of [this.configurations.getConfigName(), ...this.configurations.getSectionNames()]) {\n            const group = [];\n            for (const provider of providers) {\n                if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                    group.push(provider);\n                }\n            }\n            groups.set(configName, group);\n        }\n        return groups;\n    }\n\n    protected getFolderProviders(resourceUri?: string): FolderPreferenceProvider[] {\n        if (!resourceUri) {\n            return [];\n        }\n        const resourcePath = new URI(resourceUri).path;\n        let folder: Readonly<{ relativity: number, uri?: string }> = { relativity: Number.MAX_SAFE_INTEGER };\n        const providers = new Map<string, FolderPreferenceProvider[]>();\n        for (const provider of this.providers.values()) {\n            const uri = provider.folderUri.toString();\n            const folderProviders = (providers.get(uri) || []);\n            folderProviders.push(provider);\n            providers.set(uri, folderProviders);\n\n            const relativity = provider.folderUri.path.relativity(resourcePath);\n            if (relativity >= 0 && folder.relativity > relativity) {\n                folder = { relativity, uri };\n            }\n        }\n        return folder.uri && providers.get(folder.uri) || [];\n    }\n\n    protected createProvider(options: FolderPreferenceProviderOptions): FolderPreferenceProvider {\n        const provider = this.folderPreferenceProviderFactory(options);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => this.onDidPreferencesChangedEmitter.fire(change)));\n        return provider;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Container, interfaces } from 'inversify';\nimport { PreferenceProvider, PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { UserPreferenceProvider } from './user-preference-provider';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { WorkspaceFilePreferenceProvider, WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProviderOptions } from './workspace-file-preference-provider';\nimport { FoldersPreferencesProvider } from './folders-preferences-provider';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory, FolderPreferenceProviderOptions } from './folder-preference-provider';\n\nexport function bindWorkspaceFilePreferenceProvider(bind: interfaces.Bind): void {\n    bind(WorkspaceFilePreferenceProviderFactory).toFactory(ctx => (options: WorkspaceFilePreferenceProviderOptions) => {\n        const child = new Container({ defaultScope: 'Singleton' });\n        child.parent = ctx.container;\n        child.bind(WorkspaceFilePreferenceProvider).toSelf();\n        child.bind(WorkspaceFilePreferenceProviderOptions).toConstantValue(options);\n        return child.get(WorkspaceFilePreferenceProvider);\n    });\n}\n\nexport function bindFolderPreferenceProvider(bind: interfaces.Bind): void {\n    bind(FolderPreferenceProviderFactory).toFactory(ctx =>\n        (options: FolderPreferenceProviderOptions) => {\n            const child = new Container({ defaultScope: 'Singleton' });\n            child.parent = ctx.container;\n            child.bind(FolderPreferenceProviderOptions).toConstantValue(options);\n            const configurations = ctx.container.get(PreferenceConfigurations);\n            if (configurations.isConfigUri(options.configUri)) {\n                child.bind(FolderPreferenceProvider).toSelf();\n                return child.get(FolderPreferenceProvider);\n            }\n            const sectionName = configurations.getName(options.configUri);\n            return child.getNamed(FolderPreferenceProvider, sectionName);\n        }\n    );\n\n}\n\nexport function bindPreferenceProviders(bind: interfaces.Bind, unbind: interfaces.Unbind): void {\n    unbind(PreferenceProvider);\n\n    bind(PreferenceProvider).to(UserPreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.User);\n    bind(PreferenceProvider).to(WorkspacePreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Workspace);\n    bind(PreferenceProvider).to(FoldersPreferencesProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Folder);\n    bindFolderPreferenceProvider(bind);\n    bindWorkspaceFilePreferenceProvider(bind);\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Title } from '@phosphor/widgets';\nimport { AttachedProperty } from '@phosphor/properties';\nimport { DockPanel, Menu, TabBar, Widget } from '@phosphor/widgets';\nimport { CommandRegistry } from '@phosphor/commands';\nimport { VirtualElement, h } from '@phosphor/virtualdom';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { EditorWidget } from '@theia/editor/lib/browser';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport URI from '@theia/core/lib/common/uri';\nimport { FileAccess, FileSystem } from '@theia/filesystem/lib/common';\nimport { FoldersPreferencesProvider } from './folders-preferences-provider';\n\nexport class PreferencesEditorWidgetTitle extends Title<PreferencesEditorWidget> {\n    clickableText?: string;\n    clickableTextTooltip?: string;\n    clickableTextCallback?: (value: string) => void;\n}\n\nexport class PreferencesEditorWidget extends EditorWidget {\n    scope: PreferenceScope | undefined;\n\n    get title(): PreferencesEditorWidgetTitle {\n        return new AttachedProperty<PreferencesEditorWidget, PreferencesEditorWidgetTitle>({\n            name: 'title',\n            create: owner => new PreferencesEditorWidgetTitle({ owner }),\n        }).get(this);\n    }\n}\n\n// TODO: put into DI context\nexport class PreferenceEditorTabHeaderRenderer extends TabBar.Renderer {\n\n    constructor(\n        private readonly workspaceService: WorkspaceService,\n        private readonly fileSystem: FileSystem,\n        private readonly foldersPreferenceProvider: FoldersPreferencesProvider\n    ) {\n        super();\n    }\n\n    renderTab(data: TabBar.IRenderData<PreferencesEditorWidget>): VirtualElement {\n        const title = data.title;\n        title.closable = false;\n        const key = this.createTabKey(data);\n        const style = this.createTabStyle(data);\n        const className = this.createTabClass(data);\n        return h.li(\n            { key, className, title: title.caption, style },\n            this.renderIcon(data),\n            this.renderLabel(data),\n            this.renderCloseIcon(data)\n        );\n    }\n\n    renderLabel(data: TabBar.IRenderData<PreferencesEditorWidget>): VirtualElement {\n        const clickableTitle = data.title.owner.title;\n        if (clickableTitle.clickableText) {\n            return h.div(\n                h.span({ className: 'p-TabBar-tabLabel' }, data.title.label),\n                h.span({\n                    className: 'p-TabBar-tabLabel p-TabBar-tab-secondary-label',\n                    title: clickableTitle.clickableTextTooltip,\n                    onclick: event => {\n                        const editorUri = data.title.owner.editor.uri;\n                        this.refreshContextMenu(editorUri.parent.parent.toString(), clickableTitle.clickableTextCallback || (() => { }))\n                            .then(menu => menu.open(event.x, event.y));\n                    }\n                }, clickableTitle.clickableText)\n            );\n        }\n        return super.renderLabel(data);\n    }\n\n    protected async refreshContextMenu(activeMenuId: string, menuItemAction: (value: string) => void): Promise<Menu> {\n        const commands = new CommandRegistry();\n        const menu = new Menu({ commands });\n        const roots = this.workspaceService.tryGetRoots().map(r => r.uri);\n        for (const root of roots) {\n            if (await this.canAccessSettings(root)) {\n                const commandId = `switch_folder_pref_editor_to_${root}`;\n                if (!commands.hasCommand(commandId)) {\n                    const rootUri = new URI(root);\n                    const isActive = rootUri.toString() === activeMenuId;\n                    commands.addCommand(commandId, {\n                        label: rootUri.displayName,\n                        iconClass: isActive ? 'fa fa-check' : '',\n                        execute: () => {\n                            if (!isActive) {\n                                menuItemAction(root);\n                            }\n                        }\n                    });\n                }\n\n                menu.addItem({\n                    type: 'command',\n                    command: commandId\n                });\n            }\n        }\n        return menu;\n    }\n\n    private async canAccessSettings(folderUriStr: string): Promise<boolean> {\n        const settingsUri = this.foldersPreferenceProvider.getConfigUri(folderUriStr);\n        if (settingsUri) {\n            return this.fileSystem.access(settingsUri.toString(), FileAccess.Constants.R_OK);\n        }\n        return this.fileSystem.access(folderUriStr, FileAccess.Constants.W_OK);\n    }\n}\n\n// TODO put into DI context\nexport class PreferenceEditorContainerTabBarRenderer extends DockPanel.Renderer {\n\n    constructor(\n        private readonly workspaceService: WorkspaceService,\n        private readonly fileSystem: FileSystem,\n        private readonly foldersPreferenceProvider: FoldersPreferencesProvider\n    ) {\n        super();\n    }\n\n    createTabBar(): TabBar<Widget> {\n        const bar = new TabBar({ renderer: new PreferenceEditorTabHeaderRenderer(this.workspaceService, this.fileSystem, this.foldersPreferenceProvider) });\n        bar.addClass('p-DockPanel-tabBar');\n        return bar;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport '../../src/browser/style/index.css';\n\nimport { ContainerModule, interfaces } from 'inversify';\nimport { bindViewContribution, WidgetFactory, FrontendApplicationContribution } from '@theia/core/lib/browser';\nimport { PreferencesContribution } from './preferences-contribution';\nimport { createPreferencesTreeWidget } from './preference-tree-container';\nimport { PreferencesMenuFactory } from './preferences-menu-factory';\nimport { PreferencesFrontendApplicationContribution } from './preferences-frontend-application-contribution';\nimport { PreferencesContainer, PreferencesTreeWidget, PreferencesEditorsContainer } from './preferences-tree-widget';\nimport { bindPreferenceProviders } from './preference-bindings';\n\nimport './preferences-monaco-contribution';\n\nexport const PreferencesWidgetFactory = Symbol('PreferencesWidgetFactory');\n\nexport function bindPreferences(bind: interfaces.Bind, unbind: interfaces.Unbind): void {\n    bindPreferenceProviders(bind, unbind);\n\n    bindViewContribution(bind, PreferencesContribution);\n\n    bind(PreferencesContainer).toSelf();\n    bind(WidgetFactory).toDynamicValue(({ container }) => ({\n        id: PreferencesContainer.ID,\n        createWidget: () => container.get(PreferencesContainer)\n    }));\n\n    bind(PreferencesWidgetFactory).toDynamicValue(({ container }) => ({\n        id: PreferencesTreeWidget.ID,\n        createWidget: () => createPreferencesTreeWidget(container)\n    })).inSingletonScope();\n    bind(WidgetFactory).toService(PreferencesWidgetFactory);\n\n    bind(PreferencesEditorsContainer).toSelf();\n    bind(WidgetFactory).toDynamicValue(({ container }) => ({\n        id: PreferencesEditorsContainer.ID,\n        createWidget: () => container.get(PreferencesEditorsContainer)\n    }));\n\n    bind(PreferencesMenuFactory).toSelf();\n    bind(FrontendApplicationContribution).to(PreferencesFrontendApplicationContribution).inSingletonScope();\n}\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    bindPreferences(bind, unbind);\n});\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces } from 'inversify';\nimport { PreferencesDecorator } from './preferences-decorator';\nimport { PreferencesDecoratorService } from './preferences-decorator-service';\nimport {\n    createTreeContainer,\n    defaultTreeProps,\n    TreeDecoratorService,\n    TreeProps,\n    TreeWidget\n} from '@theia/core/lib/browser';\nimport { PreferencesTreeWidget } from './preferences-tree-widget';\n\nexport function createPreferencesTreeWidget(parent: interfaces.Container): PreferencesTreeWidget {\n    const child = createTreeContainer(parent);\n\n    child.bind(PreferencesTreeWidget).toSelf();\n    child.rebind(TreeProps).toConstantValue({ ...defaultTreeProps, search: true });\n    child.rebind(TreeWidget).toService(PreferencesTreeWidget);\n\n    bindPreferencesDecorator(child);\n\n    return child.get(PreferencesTreeWidget);\n}\n\nfunction bindPreferencesDecorator(parent: interfaces.Container): void {\n    parent.bind(PreferencesDecorator).toSelf().inSingletonScope();\n    parent.bind(PreferencesDecoratorService).toSelf().inSingletonScope();\n    parent.rebind(TreeDecoratorService).toService(PreferencesDecoratorService);\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named } from 'inversify';\nimport { MenuModelRegistry, CommandRegistry } from '@theia/core';\nimport {\n    CommonMenus,\n    PreferenceScope,\n    PreferenceProvider,\n    AbstractViewContribution,\n    CommonCommands,\n    KeybindingRegistry\n} from '@theia/core/lib/browser';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { FileSystem } from '@theia/filesystem/lib/common';\nimport { UserStorageService } from '@theia/userstorage/lib/browser';\nimport { PreferencesContainer } from './preferences-tree-widget';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport { isFirefox } from '@theia/core/lib/browser';\nimport { isOSX } from '@theia/core/lib/common/os';\n\n@injectable()\nexport class PreferencesContribution extends AbstractViewContribution<PreferencesContainer> {\n\n    @inject(UserStorageService) protected readonly userStorageService: UserStorageService;\n    @inject(PreferenceProvider) @named(PreferenceScope.Workspace) protected readonly workspacePreferenceProvider: WorkspacePreferenceProvider;\n    @inject(FileSystem) protected readonly filesystem: FileSystem;\n    @inject(EditorManager) protected readonly editorManager: EditorManager;\n\n    constructor() {\n        super({\n            widgetId: PreferencesContainer.ID,\n            widgetName: 'Preferences',\n            defaultWidgetOptions: { area: 'main' }\n        });\n    }\n\n    async registerCommands(commands: CommandRegistry): Promise<void> {\n        commands.registerCommand(CommonCommands.OPEN_PREFERENCES, {\n            isEnabled: () => true,\n            execute: (preferenceScope = PreferenceScope.User) => this.openPreferences(preferenceScope)\n        });\n    }\n\n    registerMenus(menus: MenuModelRegistry): void {\n        menus.registerMenuAction(CommonMenus.FILE_SETTINGS_SUBMENU_OPEN, {\n            commandId: CommonCommands.OPEN_PREFERENCES.id,\n            order: 'a10'\n        });\n    }\n\n    registerKeybindings(keybindings: KeybindingRegistry): void {\n        if (isOSX && !isFirefox) {\n            keybindings.registerKeybinding({\n                command: CommonCommands.OPEN_PREFERENCES.id,\n                keybinding: 'cmd+,'\n            });\n        }\n        keybindings.registerKeybinding({\n            command: CommonCommands.OPEN_PREFERENCES.id,\n            keybinding: 'ctrl+,'\n        });\n    }\n\n    protected async openPreferences(preferenceScope: PreferenceScope): Promise<void> {\n        const wsUri = this.workspacePreferenceProvider.getConfigUri();\n        if (wsUri && !await this.filesystem.exists(wsUri.toString())) {\n            await this.filesystem.createFile(wsUri.toString());\n        }\n\n        const widget = await this.widget;\n        widget.preferenceScope = preferenceScope;\n        super.openView({ activate: true });\n        widget.activatePreferenceEditor(preferenceScope);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { AbstractTreeDecoratorService } from '@theia/core/lib/browser/tree/tree-decorator';\nimport { PreferencesDecorator } from './preferences-decorator';\n\n@injectable()\nexport class PreferencesDecoratorService extends AbstractTreeDecoratorService {\n\n    constructor(@inject(PreferencesDecorator) protected readonly preferencesTreeDecorator: PreferencesDecorator) {\n        super([preferencesTreeDecorator]);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { Tree, TreeDecorator, TreeDecoration, PreferenceDataProperty, PreferenceService } from '@theia/core/lib/browser';\nimport { Emitter, Event, MaybePromise } from '@theia/core';\nimport { escapeInvisibleChars } from '@theia/core/lib/common/strings';\n\n@injectable()\nexport class PreferencesDecorator implements TreeDecorator {\n    readonly id: string = 'theia-preferences-decorator';\n\n    private activeFolderUri: string | undefined;\n\n    protected preferences: { [id: string]: PreferenceDataProperty }[];\n    protected preferencesDecorations: Map<string, TreeDecoration.Data>;\n\n    protected readonly emitter: Emitter<(tree: Tree) => Map<string, TreeDecoration.Data>> = new Emitter();\n\n    constructor(@inject(PreferenceService) private readonly preferencesService: PreferenceService) {\n        this.preferencesDecorations = new Map();\n        this.preferencesService.onPreferenceChanged(() => {\n            this.fireDidChangeDecorations(this.preferences);\n        });\n    }\n\n    get onDidChangeDecorations(): Event<(tree: Tree) => Map<string, TreeDecoration.Data>> {\n        return this.emitter.event;\n    }\n\n    fireDidChangeDecorations(preferences: { [id: string]: PreferenceDataProperty }[]): void {\n        if (!this.preferences) {\n            this.preferences = preferences;\n        }\n        this.preferencesDecorations = new Map(preferences.map(m => {\n            const preferenceName = Object.keys(m)[0];\n            const preferenceValue = m[preferenceName];\n            const storedValue = this.preferencesService.get(preferenceName, undefined, this.activeFolderUri);\n            const description = this.getDescription(preferenceValue);\n            return [preferenceName, {\n                tooltip: this.buildTooltip(preferenceValue),\n                captionSuffixes: [\n                    {\n                        data: `: ${this.getPreferenceDisplayValue(storedValue, preferenceValue.defaultValue)}`\n                    },\n                    {\n                        data: ' ' + description,\n                        fontData: { color: 'var(--theia-descriptionForeground)' }\n                    }]\n            }] as [string, TreeDecoration.Data];\n        }));\n        this.emitter.fire(() => this.preferencesDecorations);\n    }\n\n    decorations(tree: Tree): MaybePromise<Map<string, TreeDecoration.Data>> {\n        return this.preferencesDecorations;\n    }\n\n    setActiveFolder(folder: string): void {\n        this.activeFolderUri = folder;\n        this.fireDidChangeDecorations(this.preferences);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private getPreferenceDisplayValue(storedValue: any, defaultValue: any): any {\n        if (storedValue !== undefined) {\n            if (typeof storedValue === 'string') {\n                return escapeInvisibleChars(storedValue);\n            }\n            return storedValue;\n        }\n        return defaultValue;\n    }\n\n    private buildTooltip(data: PreferenceDataProperty): string {\n        let tooltips: string = '';\n        if (data.description) {\n            tooltips = data.description;\n        }\n        if (data.defaultValue) {\n            tooltips += `\\nDefault: ${JSON.stringify(data.defaultValue)}`;\n        } else if (data.default !== undefined) {\n            tooltips += `\\nDefault: ${JSON.stringify(data.default)}`;\n        }\n        if (data.minimum) {\n            tooltips += `\\nMin: ${data.minimum}`;\n        }\n        if (data.enum) {\n            tooltips += `\\nAccepted Values: ${data.enum.join(', ')}`;\n        }\n        return tooltips;\n    }\n\n    /**\n     * Get the description for the preference for display purposes.\n     * @param value {PreferenceDataProperty} the preference data property.\n     * @returns the description if available.\n     */\n    private getDescription(value: PreferenceDataProperty): string {\n\n        /**\n         * Format the string for consistency and display purposes.\n         * Formatting includes:\n         * - capitalizing the string.\n         * - ensuring it ends in punctuation (`.`).\n         * @param str {string} the string to format.\n         * @returns the formatted string.\n         */\n        function format(str: string): string {\n            if (str.endsWith('.')) {\n                return str.charAt(0).toUpperCase() + str.slice(1);\n            }\n            return `${str.charAt(0).toUpperCase() + str.slice(1)}.`;\n        }\n\n        if (value.description) {\n            return format(value.description);\n        } else if (value.markdownDescription) {\n            return format(value.markdownDescription);\n        }\n        return '';\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { FrontendApplicationContribution, PreferenceSchemaProvider } from '@theia/core/lib/browser';\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { InMemoryResources } from '@theia/core';\nimport { JsonSchemaStore } from '@theia/core/lib/browser/json-schema-store';\nimport { USER_PREFERENCE_URI } from './user-preference-provider';\n\n@injectable()\nexport class PreferencesFrontendApplicationContribution implements FrontendApplicationContribution {\n\n    @inject(JsonSchemaStore) jsonSchemaStore: JsonSchemaStore;\n    @inject(PreferenceSchemaProvider) schemaProvider: PreferenceSchemaProvider;\n    @inject(InMemoryResources) inmemoryResources: InMemoryResources;\n\n    onStart(): void {\n        const serializeSchema = () => JSON.stringify(this.schemaProvider.getCombinedSchema());\n        const uri = new URI('vscode://schemas/settings/user');\n        this.inmemoryResources.add(uri, serializeSchema());\n        this.jsonSchemaStore.registerSchema({\n            fileMatch: ['settings.json', USER_PREFERENCE_URI.toString()],\n            url: uri.toString()\n        });\n        this.schemaProvider.onDidPreferenceSchemaChanged(() =>\n            this.inmemoryResources.update(uri, serializeSchema())\n        );\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { Menu } from '@phosphor/widgets';\nimport { CommandRegistry } from '@phosphor/commands';\nimport { escapeInvisibleChars, unescapeInvisibleChars } from '@theia/core/lib/common/strings';\nimport { PreferenceDataProperty } from '@theia/core/lib/browser';\n\n@injectable()\nexport class PreferencesMenuFactory {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    createPreferenceContextMenu(id: string, savedPreference: any, property: PreferenceDataProperty, execute: (property: string, value: any) => void): Menu {\n        const commands = new CommandRegistry();\n        const menu = new Menu({ commands });\n        if (property) {\n            const enumConst = property.enum;\n            if (enumConst) {\n                enumConst.map(escapeInvisibleChars)\n                    .forEach(enumValue => {\n                        const commandId = id + '-' + enumValue;\n                        if (!commands.hasCommand(commandId)) {\n                            commands.addCommand(commandId, {\n                                label: enumValue,\n                                iconClass: escapeInvisibleChars(savedPreference) === enumValue || !savedPreference && property.defaultValue === enumValue ? 'fa fa-check' : '',\n                                execute: () => execute(id, unescapeInvisibleChars(enumValue))\n                            });\n                            menu.addItem({\n                                type: 'command',\n                                command: commandId\n                            });\n                        }\n                    });\n            } else if (property.type && property.type === 'boolean') {\n                const commandTrue = id + '-true';\n                commands.addCommand(commandTrue, {\n                    label: 'true',\n                    iconClass: savedPreference === true || savedPreference === 'true' || savedPreference === undefined && property.defaultValue === true ? 'fa fa-check' : '',\n                    execute: () => execute(id, true)\n                });\n                menu.addItem({\n                    type: 'command',\n                    command: commandTrue\n                });\n\n                const commandFalse = id + '-false';\n                commands.addCommand(commandFalse, {\n                    label: 'false',\n                    iconClass: savedPreference === false || savedPreference === 'false' || savedPreference === undefined && property.defaultValue === false ? 'fa fa-check' : '',\n                    execute: () => execute(id, false)\n                });\n                menu.addItem({\n                    type: 'command',\n                    command: commandFalse\n                });\n            } else {\n                const commandId = id + '-stringValue';\n                commands.addCommand(commandId, {\n                    label: 'Add Value',\n                    execute: () => execute(id, property.defaultValue ? property.defaultValue : '')\n                });\n                menu.addItem({\n                    type: 'command',\n                    command: commandId\n                });\n            }\n        }\n        return menu;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nmonaco.languages.register({\n    id: 'jsonc',\n    'aliases': [\n        'JSON with Comments'\n    ],\n    'filenames': [\n        'settings.json'\n    ]\n});\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, postConstruct, named, injectable } from 'inversify';\nimport { Message } from '@phosphor/messaging';\nimport { PreferencesMenuFactory } from './preferences-menu-factory';\nimport { PreferencesDecorator } from './preferences-decorator';\nimport { toArray } from '@phosphor/algorithm';\nimport { BoxPanel, DockPanel, SplitPanel, Widget } from '@phosphor/widgets';\nimport {\n    ApplicationShell,\n    ContextMenuRenderer,\n    ExpandableTreeNode,\n    PreferenceDataProperty,\n    PreferenceSchemaProvider,\n    PreferenceScope,\n    PreferenceService,\n    Saveable,\n    SelectableTreeNode,\n    TreeModel,\n    TreeNode,\n    TreeProps,\n    TreeWidget,\n    WidgetManager,\n    PreferenceProvider,\n    LabelProvider\n} from '@theia/core/lib/browser';\nimport { UserPreferenceProvider } from './user-preference-provider';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { PreferencesEditorWidget, PreferenceEditorContainerTabBarRenderer } from './preference-editor-widget';\nimport { EditorWidget, EditorManager } from '@theia/editor/lib/browser';\nimport { DisposableCollection, Emitter, Event, MessageService } from '@theia/core';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { FileSystem, FileSystemUtils } from '@theia/filesystem/lib/common';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport URI from '@theia/core/lib/common/uri';\nimport { FoldersPreferencesProvider } from './folders-preferences-provider';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\n\n@injectable()\nexport class PreferencesContainer extends SplitPanel implements ApplicationShell.TrackableWidgetProvider, Saveable {\n\n    static ID = 'preferences_container_widget';\n\n    protected treeWidget: PreferencesTreeWidget | undefined;\n    protected editorsContainer: PreferencesEditorsContainer;\n    private currentEditor: PreferencesEditorWidget | undefined;\n    private readonly editors: PreferencesEditorWidget[] = [];\n    private deferredEditors = new Deferred<PreferencesEditorWidget[]>();\n\n    protected readonly onDirtyChangedEmitter = new Emitter<void>();\n    readonly onDirtyChanged: Event<void> = this.onDirtyChangedEmitter.event;\n\n    protected readonly onDidChangeTrackableWidgetsEmitter = new Emitter<Widget[]>();\n    readonly onDidChangeTrackableWidgets = this.onDidChangeTrackableWidgetsEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection();\n\n    @inject(WidgetManager)\n    protected readonly widgetManager: WidgetManager;\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(PreferenceService)\n    protected readonly preferenceService: PreferenceService;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    protected _preferenceScope: PreferenceScope = PreferenceScope.User;\n\n    @postConstruct()\n    protected init(): void {\n        this.id = PreferencesContainer.ID;\n        this.title.label = 'Preferences';\n        this.title.caption = this.title.label;\n        this.title.closable = true;\n        this.title.iconClass = 'fa fa-sliders';\n\n        this.toDispose.pushAll([this.onDirtyChangedEmitter, this.onDidChangeTrackableWidgetsEmitter]);\n    }\n\n    dispose(): void {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.toDispose.dispose();\n    }\n\n    get autoSave(): 'on' | 'off' {\n        return this.editors.some(editor => editor.saveable.autoSave === 'on') ? 'on' : 'off';\n    }\n\n    get dirty(): boolean {\n        return this.editors.some(editor => editor.saveable.dirty);\n    }\n\n    save(): void {\n        this.editors.forEach(editor => editor.saveable.save());\n    }\n\n    getTrackableWidgets(): Promise<Widget[]> {\n        return this.deferredEditors.promise;\n    }\n\n    get preferenceScope(): PreferenceScope {\n        return this._preferenceScope;\n    }\n\n    set preferenceScope(preferenceScope: PreferenceScope) {\n        this._preferenceScope = preferenceScope;\n    }\n\n    protected async onAfterAttach(msg: Message): Promise<void> {\n        if (this.widgets.length > 0) {\n            return;\n        }\n\n        this.treeWidget = await this.widgetManager.getOrCreateWidget<PreferencesTreeWidget>(PreferencesTreeWidget.ID);\n        this.treeWidget.onPreferenceSelected(value => {\n            const preferenceName = Object.keys(value)[0];\n            const preferenceValue = value[preferenceName];\n            if (this.dirty) {\n                this.messageService.warn('Preferences editor(s) has/have unsaved changes');\n            } else if (this.currentEditor) {\n                this.preferenceService.set(preferenceName, preferenceValue, this.currentEditor.scope, this.currentEditor.editor.uri.toString());\n            }\n        });\n\n        this.editorsContainer = await this.widgetManager.getOrCreateWidget<PreferencesEditorsContainer>(PreferencesEditorsContainer.ID);\n        this.toDispose.push(this.editorsContainer);\n        this.editorsContainer.activatePreferenceEditor(this.preferenceScope);\n        this.toDispose.push(this.editorsContainer.onInit(() => {\n            this.handleEditorsChanged();\n            this.deferredEditors.resolve(this.editors);\n        }));\n        this.toDispose.push(this.editorsContainer.onEditorChanged(editor => {\n            if (this.currentEditor && this.currentEditor.editor.uri.toString() !== editor.editor.uri.toString()) {\n                this.currentEditor.saveable.save();\n            }\n            if (editor) {\n                this.preferenceScope = editor.scope || PreferenceScope.User;\n            } else {\n                this.preferenceScope = PreferenceScope.User;\n            }\n            this.currentEditor = editor;\n        }));\n        this.toDispose.push(this.editorsContainer.onFolderPreferenceEditorUriChanged(uriStr => {\n            if (this.treeWidget) {\n                this.treeWidget.setActiveFolder(uriStr);\n            }\n            this.handleEditorsChanged();\n        }));\n        this.toDispose.push(this.workspaceService.onWorkspaceLocationChanged(async workspaceFile => {\n            await this.editorsContainer.refreshWorkspacePreferenceEditor();\n            await this.refreshFoldersPreferencesEditor();\n            this.handleEditorsChanged();\n        }));\n        this.toDispose.push(this.workspaceService.onWorkspaceChanged(async roots => {\n            await this.refreshFoldersPreferencesEditor();\n        }));\n\n        const treePanel = new BoxPanel();\n        treePanel.addWidget(this.treeWidget);\n        this.addWidget(treePanel);\n        this.addWidget(this.editorsContainer);\n        this.treeWidget.activate();\n        super.onAfterAttach(msg);\n    }\n\n    protected onActivateRequest(msg: Message): void {\n        if (this.currentEditor) {\n            this.currentEditor.activate();\n        }\n        super.onActivateRequest(msg);\n    }\n\n    protected onCloseRequest(msg: Message): void {\n        if (this.treeWidget) {\n            this.treeWidget.close();\n        }\n        this.editorsContainer.close();\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n\n    public async activatePreferenceEditor(preferenceScope: PreferenceScope): Promise<void> {\n        await this.deferredEditors.promise;\n        this.doActivatePreferenceEditor(preferenceScope);\n    }\n\n    private doActivatePreferenceEditor(preferenceScope: PreferenceScope): void {\n        this.preferenceScope = preferenceScope;\n        if (this.editorsContainer) {\n            this.editorsContainer.activatePreferenceEditor(preferenceScope);\n        }\n    }\n\n    protected handleEditorsChanged(): void {\n        const currentEditors = toArray(this.editorsContainer.widgets());\n        currentEditors.forEach(editor => {\n            if (editor instanceof EditorWidget && this.editors.findIndex(e => e === editor) < 0) {\n                const editorWidget = editor as PreferencesEditorWidget;\n                this.editors.push(editorWidget);\n                const savable = editorWidget.saveable;\n                savable.onDirtyChanged(() => {\n                    this.onDirtyChangedEmitter.fire(undefined);\n                });\n            }\n        });\n        for (let i = this.editors.length - 1; i >= 0; i--) {\n            if (currentEditors.findIndex(e => e === this.editors[i]) < 0) {\n                this.editors.splice(i, 1);\n            }\n        }\n        this.onDidChangeTrackableWidgetsEmitter.fire(this.editors);\n        this.doActivatePreferenceEditor(this.preferenceScope);\n    }\n\n    private async refreshFoldersPreferencesEditor(): Promise<void> {\n        const roots = this.workspaceService.tryGetRoots();\n        if (roots.length === 0) {\n            this.editorsContainer.closeFoldersPreferenceEditorWidget();\n        } else if (!roots.some(r => r.uri === this.editorsContainer.activeFolder)) {\n            const firstRoot = roots[0];\n            await this.editorsContainer.refreshFoldersPreferencesEditorWidget(firstRoot ? firstRoot.uri : undefined);\n        }\n    }\n}\n\n@injectable()\nexport class PreferencesEditorsContainer extends DockPanel {\n\n    static ID = 'preferences_editors_container';\n\n    @inject(EditorManager)\n    protected readonly editorManager: EditorManager;\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.User)\n    protected readonly userPreferenceProvider: UserPreferenceProvider;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.Workspace)\n    protected readonly workspacePreferenceProvider: WorkspacePreferenceProvider;\n\n    @inject(EnvVariablesServer)\n    protected readonly envServer: EnvVariablesServer;\n\n    private userPreferenceEditorWidget: PreferencesEditorWidget;\n    private workspacePreferenceEditorWidget: PreferencesEditorWidget | undefined;\n    private foldersPreferenceEditorWidget: PreferencesEditorWidget | undefined;\n\n    private readonly onInitEmitter = new Emitter<void>();\n    readonly onInit: Event<void> = this.onInitEmitter.event;\n\n    private readonly onEditorChangedEmitter = new Emitter<PreferencesEditorWidget>();\n    readonly onEditorChanged: Event<PreferencesEditorWidget> = this.onEditorChangedEmitter.event;\n\n    private readonly onFolderPreferenceEditorUriChangedEmitter = new Emitter<string>();\n    readonly onFolderPreferenceEditorUriChanged: Event<string> = this.onFolderPreferenceEditorUriChangedEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection(\n        this.onEditorChangedEmitter,\n        this.onInitEmitter\n    );\n\n    protected readonly toDisposeOnDetach = new DisposableCollection();\n\n    constructor(\n        @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService,\n        @inject(FileSystem) protected readonly fileSystem: FileSystem,\n        @inject(PreferenceProvider) @named(PreferenceScope.Folder)\n        protected readonly foldersPreferenceProvider: FoldersPreferencesProvider\n    ) {\n        super({ renderer: new PreferenceEditorContainerTabBarRenderer(workspaceService, fileSystem, foldersPreferenceProvider) });\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n        super.dispose();\n    }\n\n    onCloseRequest(msg: Message): void {\n        toArray(this.widgets()).forEach(widget => widget.close());\n        super.onCloseRequest(msg);\n    }\n\n    onUpdateRequest(msg: Message): void {\n        const editor = this.selectedWidgets().next();\n        if (editor) {\n            this.onEditorChangedEmitter.fire(<PreferencesEditorWidget>editor);\n        }\n        super.onUpdateRequest(msg);\n    }\n\n    onBeforeDetach(): void {\n        this.toDisposeOnDetach.dispose();\n    }\n\n    protected async onAfterAttach(msg: Message): Promise<void> {\n        this.userPreferenceEditorWidget = await this.getUserPreferenceEditorWidget();\n        this.addWidget(this.userPreferenceEditorWidget);\n        await this.refreshWorkspacePreferenceEditor();\n        await this.refreshFoldersPreferencesEditorWidget(undefined);\n\n        super.onAfterAttach(msg);\n        this.onInitEmitter.fire(undefined);\n        this.toDisposeOnDetach.push(\n            this.labelProvider.onDidChange(() => {\n                // Listen to changes made by the label provider and apply updates to the preference editors.\n                const icon = this.labelProvider.getIcon(new URI('settings.json'));\n                this.userPreferenceEditorWidget.title.iconClass = icon;\n                if (this.workspacePreferenceEditorWidget) {\n                    // Explicitly update the workspace preference title to `Workspace` for single and multi-root workspaces.\n                    this.workspacePreferenceEditorWidget.title.label = 'Workspace';\n                    this.workspacePreferenceEditorWidget.title.iconClass = icon;\n                }\n            })\n        );\n    }\n\n    protected async getUserPreferenceEditorWidget(): Promise<PreferencesEditorWidget> {\n        const userPreferenceUri = this.userPreferenceProvider.getConfigUri();\n        const userPreferences = await this.editorManager.getOrCreateByUri(userPreferenceUri) as PreferencesEditorWidget;\n        userPreferences.title.label = 'User';\n        userPreferences.title.iconClass = this.labelProvider.getIcon(new URI('settings.json'));\n        userPreferences.title.caption = `User Preferences: ${await this.getPreferenceEditorCaption(userPreferenceUri)}`;\n        userPreferences.scope = PreferenceScope.User;\n        return userPreferences;\n    }\n\n    async refreshWorkspacePreferenceEditor(): Promise<void> {\n        const newWorkspacePreferenceEditorWidget = await this.getWorkspacePreferenceEditorWidget();\n        if (newWorkspacePreferenceEditorWidget) {\n            this.addWidget(newWorkspacePreferenceEditorWidget,\n                { ref: this.workspacePreferenceEditorWidget || this.userPreferenceEditorWidget });\n            if (this.workspacePreferenceEditorWidget) {\n                this.workspacePreferenceEditorWidget.close();\n                this.workspacePreferenceEditorWidget.dispose();\n            }\n            this.workspacePreferenceEditorWidget = newWorkspacePreferenceEditorWidget;\n        }\n    }\n\n    protected async getWorkspacePreferenceEditorWidget(): Promise<PreferencesEditorWidget | undefined> {\n        const workspacePreferenceUri = this.workspacePreferenceProvider.getConfigUri();\n        const workspacePreferences = workspacePreferenceUri && await this.editorManager.getOrCreateByUri(workspacePreferenceUri) as PreferencesEditorWidget;\n\n        if (workspacePreferences) {\n            workspacePreferences.title.label = 'Workspace';\n            workspacePreferences.title.caption = `Workspace Preferences: ${await this.getPreferenceEditorCaption(workspacePreferenceUri!)}`;\n            workspacePreferences.title.iconClass = this.labelProvider.getIcon(new URI('settings.json'));\n            workspacePreferences.editor.setLanguage('jsonc');\n            workspacePreferences.scope = PreferenceScope.Workspace;\n        }\n        return workspacePreferences;\n    }\n\n    get activeFolder(): string | undefined {\n        if (this.foldersPreferenceEditorWidget) {\n            return this.foldersPreferenceEditorWidget.editor.uri.parent.parent.toString();\n        }\n    }\n\n    async refreshFoldersPreferencesEditorWidget(currentFolderUri: string | undefined): Promise<void> {\n        const folders = this.workspaceService.tryGetRoots().map(r => r.uri);\n        const newFolderUri = currentFolderUri || folders[0];\n        const newFoldersPreferenceEditorWidget = await this.getFoldersPreferencesEditor(newFolderUri);\n        if (newFoldersPreferenceEditorWidget && // new widget is created\n            // the FolderPreferencesEditor is not available, OR the existing FolderPreferencesEditor is displaying the content of a different file\n            (!this.foldersPreferenceEditorWidget || this.foldersPreferenceEditorWidget.editor.uri.parent.parent.toString() !== newFolderUri)) {\n            this.addWidget(newFoldersPreferenceEditorWidget,\n                { ref: this.foldersPreferenceEditorWidget || this.workspacePreferenceEditorWidget || this.userPreferenceEditorWidget });\n            this.closeFoldersPreferenceEditorWidget();\n            this.foldersPreferenceEditorWidget = newFoldersPreferenceEditorWidget;\n            this.onFolderPreferenceEditorUriChangedEmitter.fire(newFoldersPreferenceEditorWidget.editor.uri.toString());\n        }\n    }\n\n    closeFoldersPreferenceEditorWidget(): void {\n        if (this.foldersPreferenceEditorWidget) {\n            this.foldersPreferenceEditorWidget.close();\n            this.foldersPreferenceEditorWidget.dispose();\n            this.foldersPreferenceEditorWidget = undefined;\n        }\n    }\n\n    protected async getFoldersPreferencesEditor(folderUri: string | undefined): Promise<PreferencesEditorWidget | undefined> {\n        if (this.workspaceService.saved) {\n            const settingsUri = await this.getFolderSettingsUri(folderUri);\n            const foldersPreferences = settingsUri && await this.editorManager.getOrCreateByUri(settingsUri) as PreferencesEditorWidget;\n            if (foldersPreferences) {\n                foldersPreferences.title.label = 'Folder';\n                foldersPreferences.title.caption = `Folder Preferences: ${await this.getPreferenceEditorCaption(settingsUri!)}`;\n                foldersPreferences.title.clickableText = new URI(folderUri).displayName;\n                foldersPreferences.title.clickableTextTooltip = 'Click to manage preferences in another folder';\n                foldersPreferences.title.clickableTextCallback = async (folderUriStr: string) => {\n                    await foldersPreferences.saveable.save();\n                    await this.refreshFoldersPreferencesEditorWidget(folderUriStr);\n                    this.activatePreferenceEditor(PreferenceScope.Folder);\n                };\n                foldersPreferences.scope = PreferenceScope.Folder;\n            }\n            return foldersPreferences;\n        }\n    }\n\n    private async getFolderSettingsUri(folderUri: string | undefined): Promise<URI | undefined> {\n        let configUri = this.foldersPreferenceProvider.getConfigUri(folderUri);\n        if (!configUri) {\n            configUri = this.foldersPreferenceProvider.getContainingConfigUri(folderUri);\n            if (configUri) {\n                await this.fileSystem.createFile(configUri.toString());\n            }\n        }\n        return configUri;\n    }\n\n    activatePreferenceEditor(preferenceScope: PreferenceScope): void {\n        for (const widget of toArray(this.widgets())) {\n            const preferenceEditor = widget as PreferencesEditorWidget;\n            if (preferenceEditor.scope === preferenceScope) {\n                this.activateWidget(widget);\n                break;\n            }\n        }\n    }\n\n    private async getPreferenceEditorCaption(preferenceUri: URI): Promise<string> {\n        const homeStat = await this.fileSystem.getCurrentUserHome();\n        const homeUri = homeStat ? new URI(homeStat.uri) : undefined;\n\n        let uri = preferenceUri;\n        if (preferenceUri.scheme === UserStorageUri.SCHEME && homeUri) {\n            const configDirUri = await this.envServer.getConfigDirUri();\n            uri = new URI(configDirUri).resolve(preferenceUri.path);\n        }\n        return homeUri\n            ? FileSystemUtils.tildifyPath(uri.path.toString(), homeUri.path.toString())\n            : uri.path.toString();\n    }\n}\n\n@injectable()\nexport class PreferencesTreeWidget extends TreeWidget {\n\n    static ID = 'preferences_tree_widget';\n\n    private activeFolderUri: string | undefined;\n    private preferencesGroupNames = new Set<string>();\n    private properties: { [name: string]: PreferenceDataProperty };\n    private readonly onPreferenceSelectedEmitter: Emitter<{ [key: string]: string }>;\n    readonly onPreferenceSelected: Event<{ [key: string]: string }>;\n\n    @inject(PreferencesMenuFactory) protected readonly preferencesMenuFactory: PreferencesMenuFactory;\n    @inject(PreferenceService) protected readonly preferenceService: PreferenceService;\n    @inject(PreferencesDecorator) protected readonly decorator: PreferencesDecorator;\n    @inject(PreferenceConfigurations) protected readonly preferenceConfigs: PreferenceConfigurations;\n\n    protected constructor(\n        @inject(TreeModel) readonly model: TreeModel,\n        @inject(TreeProps) protected readonly treeProps: TreeProps,\n        @inject(ContextMenuRenderer) protected readonly contextMenuRenderer: ContextMenuRenderer,\n        @inject(PreferenceSchemaProvider) protected readonly preferenceSchemaProvider: PreferenceSchemaProvider\n    ) {\n        super(treeProps, model, contextMenuRenderer);\n\n        this.onPreferenceSelectedEmitter = new Emitter<{ [key: string]: string }>();\n        this.onPreferenceSelected = this.onPreferenceSelectedEmitter.event;\n        this.toDispose.push(this.onPreferenceSelectedEmitter);\n\n        this.id = PreferencesTreeWidget.ID;\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    protected onAfterAttach(msg: Message): void {\n        this.initializeModel();\n        this.toDisposeOnDetach.push(this.preferenceSchemaProvider.onDidPreferenceSchemaChanged(() => {\n            this.initializeModel();\n        }));\n        super.onAfterAttach(msg);\n    }\n\n    protected handleContextMenuEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n        super.handleContextMenuEvent(node, event);\n        if ((<ExpandableTreeNode>node).expanded === undefined) {\n            this.openContextMenu(node, event.nativeEvent.x, event.nativeEvent.y);\n        }\n    }\n\n    protected handleClickEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n        super.handleClickEvent(node, event);\n        if ((<ExpandableTreeNode>node).expanded === undefined) {\n            this.openContextMenu(node, event.nativeEvent.x, event.nativeEvent.y);\n        }\n    }\n\n    protected handleEnter(event: KeyboardEvent): void {\n        super.handleEnter(event);\n        const node: TreeNode = this.model.selectedNodes[0];\n        if ((<ExpandableTreeNode>node).expanded === undefined) {\n            if (node) {\n                const nodeElement = document.getElementById(node.id);\n                if (nodeElement) {\n                    const position = nodeElement.getBoundingClientRect();\n                    this.openContextMenu(this.model.selectedNodes[0], position.left, position.bottom);\n                }\n            }\n        }\n    }\n\n    private openContextMenu(node: TreeNode | undefined, positionX: number, positionY: number): void {\n        if (node && SelectableTreeNode.is(node)) {\n            const contextMenu = this.preferencesMenuFactory.createPreferenceContextMenu(\n                node.id,\n                this.preferenceService.get(node.id, undefined, this.activeFolderUri),\n                this.properties[node.id],\n                (property, value) => {\n                    this.onPreferenceSelectedEmitter.fire({ [property]: value });\n                }\n            );\n            contextMenu.aboutToClose.connect(() => {\n                this.activate();\n            });\n            contextMenu.activeItem = contextMenu.items[0];\n            contextMenu.open(positionX, positionY);\n        }\n    }\n\n    protected initializeModel(): void {\n        this.properties = this.preferenceSchemaProvider.getCombinedSchema().properties;\n        for (const property in this.properties) {\n            if (property) {\n                // Compute preference group name and accept those which have the proper format.\n                const group: string = property.substring(0, property.indexOf('.'));\n                if (property.split('.').length > 1) {\n                    this.preferencesGroupNames.add(group);\n                }\n            }\n        }\n\n        type GroupNode = SelectableTreeNode & ExpandableTreeNode;\n        const preferencesGroups: GroupNode[] = [];\n        const nodes: { [id: string]: PreferenceDataProperty }[] = [];\n        const groupNames: string[] = Array.from(this.preferencesGroupNames).sort((a, b) => this.sort(a, b));\n\n        const root: ExpandableTreeNode = {\n            id: 'root-node-id',\n            name: 'Apply the preference to selected preferences file',\n            parent: undefined,\n            visible: true,\n            children: preferencesGroups,\n            expanded: true,\n        };\n\n        for (const group of groupNames) {\n            const propertyNodes: SelectableTreeNode[] = [];\n            const properties: string[] = [];\n\n            // Add a preference property if it is currently part of the group name.\n            // Properties which satisfy the condition `isSectionName` should not be added.\n            for (const property in this.properties) {\n                if (property.split('.', 1)[0] === group &&\n                    !this.preferenceConfigs.isSectionName(property)) {\n                    properties.push(property);\n                }\n            }\n\n            // Build the group name node (used to categorize common preferences together).\n            const preferencesGroup: GroupNode = {\n                id: group + '-id',\n                name: group.toLocaleUpperCase().substring(0, 1) + group.substring(1) + ' (' + properties.length + ')',\n                visible: true,\n                parent: root,\n                children: propertyNodes,\n                expanded: false,\n                selected: false\n            };\n\n            properties.sort((a, b) => this.sort(a, b)).forEach(property => {\n                const node: SelectableTreeNode = {\n                    id: property,\n                    name: property.substring(property.indexOf('.') + 1),\n                    parent: preferencesGroup,\n                    visible: true,\n                    selected: false\n                };\n                propertyNodes.push(node);\n                nodes.push({ [property]: this.properties[property] });\n            });\n            preferencesGroups.push(preferencesGroup);\n        }\n        this.decorator.fireDidChangeDecorations(nodes);\n        this.model.root = root;\n    }\n\n    setActiveFolder(folder: string): void {\n        this.activeFolderUri = folder;\n        this.decorator.setActiveFolder(folder);\n    }\n\n    /**\n     * Sort two string.\n     *\n     * @param a the first string.\n     * @param b the second string.\n     */\n    protected sort(a: string, b: string): number {\n        return a.localeCompare(b, undefined, { ignorePunctuation: true });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\nimport { PreferenceScope } from '@theia/core/lib/browser';\n\nexport const USER_PREFERENCE_URI = new URI().withScheme(UserStorageUri.SCHEME).withPath('settings.json');\n@injectable()\nexport class UserPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    protected getUri(): URI {\n        return USER_PREFERENCE_URI;\n    }\n\n    protected getScope(): PreferenceScope {\n        return PreferenceScope.User;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService, WorkspaceData } from '@theia/workspace/lib/browser/workspace-service';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\n\n@injectable()\nexport class WorkspaceFilePreferenceProviderOptions {\n    workspaceUri: URI;\n}\n\nexport const WorkspaceFilePreferenceProviderFactory = Symbol('WorkspaceFilePreferenceProviderFactory');\nexport type WorkspaceFilePreferenceProviderFactory = (options: WorkspaceFilePreferenceProviderOptions) => WorkspaceFilePreferenceProvider;\n\n@injectable()\nexport class WorkspaceFilePreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderOptions)\n    protected readonly options: WorkspaceFilePreferenceProviderOptions;\n\n    protected getUri(): URI {\n        return this.options.workspaceUri;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected parse(content: string): any {\n        const data = super.parse(content);\n        if (WorkspaceData.is(data)) {\n            return data.settings || {};\n        }\n        return {};\n    }\n\n    protected getPath(preferenceName: string): string[] {\n        return ['settings', preferenceName];\n    }\n\n    protected getScope(): PreferenceScope {\n        return PreferenceScope.Workspace;\n    }\n\n    getDomain(): string[] {\n        // workspace file is treated as part of the workspace\n        return this.workspaceService.tryGetRoots().map(r => r.uri).concat([this.options.workspaceUri.toString()]);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct, named } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { PreferenceScope, PreferenceProvider } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProvider } from './workspace-file-preference-provider';\n\n@injectable()\nexport class WorkspacePreferenceProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderFactory)\n    protected readonly workspaceFileProviderFactory: WorkspaceFilePreferenceProviderFactory;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.Folder)\n    protected readonly folderPreferenceProvider: PreferenceProvider;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this._ready.resolve();\n        this.ensureDelegateUpToDate();\n        this.workspaceService.onWorkspaceLocationChanged(() => this.ensureDelegateUpToDate());\n    }\n\n    getConfigUri(resourceUri: string | undefined = this.ensureResourceUri()): URI | undefined {\n        const delegate = this.delegate;\n        return delegate && delegate.getConfigUri(resourceUri);\n    }\n\n    protected _delegate: PreferenceProvider | undefined;\n    protected get delegate(): PreferenceProvider | undefined {\n        if (!this._delegate) {\n            this.ensureDelegateUpToDate();\n        }\n        return this._delegate;\n    }\n    protected readonly toDisposeOnEnsureDelegateUpToDate = new DisposableCollection();\n    protected ensureDelegateUpToDate(): void {\n        const delegate = this.createDelegate();\n        if (this._delegate !== delegate) {\n            this.toDisposeOnEnsureDelegateUpToDate.dispose();\n            this.toDispose.push(this.toDisposeOnEnsureDelegateUpToDate);\n\n            this._delegate = delegate;\n\n            if (delegate instanceof WorkspaceFilePreferenceProvider) {\n                this.toDisposeOnEnsureDelegateUpToDate.pushAll([\n                    delegate,\n                    delegate.onDidPreferencesChanged(changes => this.onDidPreferencesChangedEmitter.fire(changes))\n                ]);\n            }\n        }\n    }\n    protected createDelegate(): PreferenceProvider | undefined {\n        const workspace = this.workspaceService.workspace;\n        if (!workspace) {\n            return undefined;\n        }\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.folderPreferenceProvider;\n        }\n        return this.workspaceFileProviderFactory({\n            workspaceUri: new URI(workspace.uri)\n        });\n    }\n\n    get<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): T | undefined {\n        const delegate = this.delegate;\n        return delegate ? delegate.get<T>(preferenceName, resourceUri) : undefined;\n    }\n\n    resolve<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): { value?: T, configUri?: URI } {\n        const delegate = this.delegate;\n        return delegate ? delegate.resolve<T>(preferenceName, resourceUri) : {};\n    }\n\n    getPreferences(resourceUri: string | undefined = this.ensureResourceUri()): { [p: string]: any } {\n        const delegate = this.delegate;\n        return delegate ? delegate.getPreferences(resourceUri) : {};\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri: string | undefined = this.ensureResourceUri()): Promise<boolean> {\n        const delegate = this.delegate;\n        if (delegate) {\n            return delegate.setPreference(preferenceName, value, resourceUri);\n        }\n        return false;\n    }\n\n    protected ensureResourceUri(): string | undefined {\n        if (this.workspaceService.workspace && !this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.workspaceService.workspace.uri;\n        }\n        return undefined;\n    }\n\n}\n","\nvar content = require(\"!!../../../../../css-loader/index.js!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../css-loader/index.js!./index.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../css-loader/index.js!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './user-storage-service';\nexport * from './user-storage-resource';\nexport * from './user-storage-uri';\nexport * from './user-storage-service-filesystem';\nexport * from './user-storage-frontend-module';\n","exports = module.exports = require(\"../../../../../css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/********************************************************************************\\n * Copyright (C) 2019 TypeFox and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n#preferences_container_widget .p-SplitPanel-handle {\\n    border-right: var(--theia-border-width) solid var(--theia-editorGroup-border);\\n}\\n\\n#preferences_container_widget .p-TabBar-tabIcon {\\n    align-items: center;\\n    display: flex;\\n    line-height: var(--theia-content-line-height) !important;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}