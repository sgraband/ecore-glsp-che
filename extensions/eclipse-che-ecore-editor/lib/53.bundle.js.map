{"version":3,"sources":["webpack:////home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js","webpack:////home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/node_modules/glsp-theia-extension/src/browser/frontend-extension.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;AClED;;;;;;;;;;;;;;kFAckF;;AAElF,4IAAuD;AACvD,4JAA0E;AAC1E,wGAA4C;AAC5C,sMAAmF;AACnF,qJAA2D;AAC3D,4LAA6E;AAC7E,gLAA6F;AAC7F,kMAAiF;AAEjF,kBAAe,IAAI,2BAAe,CAAC,cAAI;IACnC,IAAI,CAAC,+BAAiB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IAEpD,+BAAwB,CAAC,IAAI,EAAE,iDAAsB,CAAC,CAAC;IACvD,IAAI,CAAC,yCAA+B,CAAC,CAAC,EAAE,CAAC,qDAAwB,CAAC,CAAC;IAEnE,IAAI,CAAC,6CAAsB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IACzD,IAAI,CAAC,yCAAkB,CAAC,CAAC,SAAS,CAAC,6CAAsB,CAAC;IAE1D,IAAI,CAAC,wDAAyB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;AAEhE,CAAC,CAAC,CAAC","file":"53.bundle.js","sourcesContent":["/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n","/********************************************************************************\n * Copyright (c) 2019 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { bindContributionProvider } from \"@theia/core\";\nimport { FrontendApplicationContribution } from \"@theia/core/lib/browser\";\nimport { ContainerModule } from \"inversify\";\nimport { GLSPTheiaSprottyConnector } from \"./diagram/glsp-theia-sprotty-connector\";\nimport { GLSPClientFactory } from \"./language/glsp-client\";\nimport { GLSPClientContribution } from \"./language/glsp-client-contribution\";\nimport { GLSPClientProvider, GLSPClientProviderImpl } from \"./language/glsp-client-provider\";\nimport { GLSPFrontendContribution } from \"./language/glsp-frontend-contribution\";\n\nexport default new ContainerModule(bind => {\n    bind(GLSPClientFactory).toSelf().inSingletonScope();\n\n    bindContributionProvider(bind, GLSPClientContribution);\n    bind(FrontendApplicationContribution).to(GLSPFrontendContribution);\n\n    bind(GLSPClientProviderImpl).toSelf().inSingletonScope();\n    bind(GLSPClientProvider).toService(GLSPClientProviderImpl)\n\n    bind(GLSPTheiaSprottyConnector).toSelf().inSingletonScope();\n\n});"],"sourceRoot":""}