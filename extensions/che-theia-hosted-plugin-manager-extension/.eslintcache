[{"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/che-theia-hosted-plugin-manager-extension/src/node/che-workspace-hosted-plugin-uri-post-processor.ts":"1","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/che-theia-hosted-plugin-manager-extension/src/node/hosted-plugin-manager-contribution-extension-backend-module.ts":"2"},{"size":3163,"mtime":1591263742310,"results":"3","hashOfConfig":"4"},{"size":793,"mtime":1591263742310,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"ex77w8",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/che-theia-hosted-plugin-manager-extension/src/node/che-workspace-hosted-plugin-uri-post-processor.ts",["11"],"/*********************************************************************\n * Copyright (c) 2019 Red Hat, Inc.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n **********************************************************************/\n\nimport { injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { HostedPluginUriPostProcessor } from '@theia/plugin-dev';\nimport WorkspaceClient, { IRemoteAPI, IRestAPIConfig } from '@eclipse-che/workspace-client';\nimport { che } from '@eclipse-che/api';\n\n@injectable()\nexport class CheWorkspaceHostedPluginUriPostProcessor implements HostedPluginUriPostProcessor {\n\n    protected restApiClient: IRemoteAPI;\n\n    constructor() {\n        const restAPIConfig: IRestAPIConfig = {};\n        restAPIConfig.baseUrl = process.env.CHE_API;\n        const token = process.env.CHE_MACHINE_TOKEN;\n        if (token) {\n            restAPIConfig.headers = {};\n            restAPIConfig.headers['Authorization'] = 'Bearer ' + token;\n        }\n        this.restApiClient = WorkspaceClient.getRestApi(restAPIConfig);\n    }\n\n    async processUri(uri: URI): Promise<URI> {\n        const hostedPluginTheiaInstanceServer = await this.getHostedPluginTheiaInstanceServer();\n        if (!hostedPluginTheiaInstanceServer) {\n            throw new Error('No server with type \"ide-dev\" found.');\n        }\n\n        const externalUri = new URI(hostedPluginTheiaInstanceServer.url);\n        return externalUri;\n    }\n\n    /**\n     * Searches for server which exposes hosted Theia instance.\n     * The server label is the attribute \"type\": \"ide-dev\".\n     */\n    protected async getHostedPluginTheiaInstanceServer(): Promise<che.workspace.Server | undefined> {\n        const workspace = await this.getCurrentWorkspace();\n        if (!workspace.runtime) {\n            throw new Error('Workspace is not running.');\n        }\n\n        const machines = workspace.runtime.machines!;\n        for (const machineName in machines) {\n            if (!machines.hasOwnProperty(machineName)) {\n                continue;\n            }\n            const servers = machines[machineName].servers!;\n            for (const serverName in servers) {\n                if (!servers.hasOwnProperty(serverName)) {\n                    continue;\n                }\n                const serverAttributes = servers[serverName].attributes;\n                if (serverAttributes && serverAttributes['type'] === 'ide-dev') {\n                    return servers[serverName];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    protected async getCurrentWorkspace(): Promise<che.workspace.Workspace> {\n        const workspaceId = process.env.CHE_WORKSPACE_ID;\n        if (!workspaceId) {\n            throw new Error('Environment variable CHE_WORKSPACE_ID is not set.');\n        }\n        return await this.restApiClient.getById<che.workspace.Workspace>(workspaceId);\n    }\n\n    async processOptions(options: object): Promise<object> {\n        return options;\n    }\n\n}\n","/home/simon/Documents/Workspaces/EclipseSource/ecore-glsp-che/client/extensions/che-theia-hosted-plugin-manager-extension/src/node/hosted-plugin-manager-contribution-extension-backend-module.ts",[],{"ruleId":"12","severity":1,"message":"13","line":77,"column":16,"nodeType":"14","endLine":77,"endColumn":86},"no-return-await","Redundant use of `await` on a return value.","Identifier"]